// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PullMsgType int32

const (
	PullMsgType_UNDEFINED    PullMsgType = 0
	PullMsgType_BLOCK_MSG    PullMsgType = 1
	PullMsgType_IDENTITY_MSG PullMsgType = 2
)

var PullMsgType_name = map[int32]string{
	0: "UNDEFINED",
	1: "BLOCK_MSG",
	2: "IDENTITY_MSG",
}
var PullMsgType_value = map[string]int32{
	"UNDEFINED":    0,
	"BLOCK_MSG":    1,
	"IDENTITY_MSG": 2,
}

func (x PullMsgType) String() string {
	return proto.EnumName(PullMsgType_name, int32(x))
}
func (PullMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type GossipMessage_Tag int32

const (
	GossipMessage_UNDEFINED    GossipMessage_Tag = 0
	GossipMessage_EMPTY        GossipMessage_Tag = 1
	GossipMessage_ORG_ONLY     GossipMessage_Tag = 2
	GossipMessage_CHAN_ONLY    GossipMessage_Tag = 3
	GossipMessage_CHAN_AND_ORG GossipMessage_Tag = 4
	GossipMessage_CHAN_OR_ORG  GossipMessage_Tag = 5
)

var GossipMessage_Tag_name = map[int32]string{
	0: "UNDEFINED",
	1: "EMPTY",
	2: "ORG_ONLY",
	3: "CHAN_ONLY",
	4: "CHAN_AND_ORG",
	5: "CHAN_OR_ORG",
}
var GossipMessage_Tag_value = map[string]int32{
	"UNDEFINED":    0,
	"EMPTY":        1,
	"ORG_ONLY":     2,
	"CHAN_ONLY":    3,
	"CHAN_AND_ORG": 4,
	"CHAN_OR_ORG":  5,
}

func (x GossipMessage_Tag) String() string {
	return proto.EnumName(GossipMessage_Tag_name, int32(x))
}
func (GossipMessage_Tag) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

// Envelope contains a marshalled
// GossipMessage and a signature over it.
// It may also contain a SecretEnvelope
// which is a marshalled Secret
type Envelope struct {
	Payload        []byte          `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature      []byte          `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	SecretEnvelope *SecretEnvelope `protobuf:"bytes,3,opt,name=secret_envelope,json=secretEnvelope" json:"secret_envelope,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetSecretEnvelope() *SecretEnvelope {
	if m != nil {
		return m.SecretEnvelope
	}
	return nil
}

// SecretEnvelope is a marshalled Secret
// and a signature over it.
// The signature should be validated by the peer
// that signed the Envelope the SecretEnvelope
// came with
type SecretEnvelope struct {
	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SecretEnvelope) Reset()                    { *m = SecretEnvelope{} }
func (m *SecretEnvelope) String() string            { return proto.CompactTextString(m) }
func (*SecretEnvelope) ProtoMessage()               {}
func (*SecretEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SecretEnvelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SecretEnvelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Secret is an entity that might be omitted
// from an Envelope when the remote peer that is receiving
// the Envelope shouldn't know the secret's content.
type Secret struct {
	// Types that are valid to be assigned to Content:
	//	*Secret_InternalEndpoint
	Content isSecret_Content `protobuf_oneof:"content"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type isSecret_Content interface{ isSecret_Content() }

type Secret_InternalEndpoint struct {
	InternalEndpoint string `protobuf:"bytes,1,opt,name=internalEndpoint,oneof"`
}

func (*Secret_InternalEndpoint) isSecret_Content() {}

func (m *Secret) GetContent() isSecret_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Secret) GetInternalEndpoint() string {
	if x, ok := m.GetContent().(*Secret_InternalEndpoint); ok {
		return x.InternalEndpoint
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Secret) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Secret_OneofMarshaler, _Secret_OneofUnmarshaler, _Secret_OneofSizer, []interface{}{
		(*Secret_InternalEndpoint)(nil),
	}
}

func _Secret_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Secret)
	// content
	switch x := m.Content.(type) {
	case *Secret_InternalEndpoint:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InternalEndpoint)
	case nil:
	default:
		return fmt.Errorf("Secret.Content has unexpected type %T", x)
	}
	return nil
}

func _Secret_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Secret)
	switch tag {
	case 1: // content.internalEndpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Content = &Secret_InternalEndpoint{x}
		return true, err
	default:
		return false, nil
	}
}

func _Secret_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Secret)
	// content
	switch x := m.Content.(type) {
	case *Secret_InternalEndpoint:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InternalEndpoint)))
		n += len(x.InternalEndpoint)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GossipMessage defines the message sent in a gossip network
type GossipMessage struct {
	// used mainly for testing, but will might be used in the future
	// for ensuring message delivery by acking
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	// The channel of the message.
	// Some GossipMessages may set this to nil, because
	// they are cross-channels but some may not
	Channel []byte `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// determines to which peers it is allowed
	// to forward the message
	Tag GossipMessage_Tag `protobuf:"varint,3,opt,name=tag,enum=protos.GossipMessage_Tag" json:"tag,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*GossipMessage_AliveMsg
	//	*GossipMessage_MemReq
	//	*GossipMessage_MemRes
	//	*GossipMessage_DataMsg
	//	*GossipMessage_Hello
	//	*GossipMessage_DataDig
	//	*GossipMessage_DataReq
	//	*GossipMessage_DataUpdate
	//	*GossipMessage_Empty
	//	*GossipMessage_Conn
	//	*GossipMessage_StateInfo
	//	*GossipMessage_StateSnapshot
	//	*GossipMessage_StateInfoPullReq
	//	*GossipMessage_StateRequest
	//	*GossipMessage_StateResponse
	//	*GossipMessage_LeadershipMsg
	//	*GossipMessage_PeerIdentity
	//	*GossipMessage_Ack
	//	*GossipMessage_PrivateReq
	//	*GossipMessage_PrivateRes
	//	*GossipMessage_PrivateData
	//	*GossipMessage_TransactionMsg
	Content isGossipMessage_Content `protobuf_oneof:"content"`
}

func (m *GossipMessage) Reset()                    { *m = GossipMessage{} }
func (m *GossipMessage) String() string            { return proto.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()               {}
func (*GossipMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type isGossipMessage_Content interface{ isGossipMessage_Content() }

type GossipMessage_AliveMsg struct {
	AliveMsg *AliveMessage `protobuf:"bytes,5,opt,name=alive_msg,json=aliveMsg,oneof"`
}
type GossipMessage_MemReq struct {
	MemReq *MembershipRequest `protobuf:"bytes,6,opt,name=mem_req,json=memReq,oneof"`
}
type GossipMessage_MemRes struct {
	MemRes *MembershipResponse `protobuf:"bytes,7,opt,name=mem_res,json=memRes,oneof"`
}
type GossipMessage_DataMsg struct {
	DataMsg *DataMessage `protobuf:"bytes,8,opt,name=data_msg,json=dataMsg,oneof"`
}
type GossipMessage_Hello struct {
	Hello *GossipHello `protobuf:"bytes,9,opt,name=hello,oneof"`
}
type GossipMessage_DataDig struct {
	DataDig *DataDigest `protobuf:"bytes,10,opt,name=data_dig,json=dataDig,oneof"`
}
type GossipMessage_DataReq struct {
	DataReq *DataRequest `protobuf:"bytes,11,opt,name=data_req,json=dataReq,oneof"`
}
type GossipMessage_DataUpdate struct {
	DataUpdate *DataUpdate `protobuf:"bytes,12,opt,name=data_update,json=dataUpdate,oneof"`
}
type GossipMessage_Empty struct {
	Empty *Empty `protobuf:"bytes,13,opt,name=empty,oneof"`
}
type GossipMessage_Conn struct {
	Conn *ConnEstablish `protobuf:"bytes,14,opt,name=conn,oneof"`
}
type GossipMessage_StateInfo struct {
	StateInfo *StateInfo `protobuf:"bytes,15,opt,name=state_info,json=stateInfo,oneof"`
}
type GossipMessage_StateSnapshot struct {
	StateSnapshot *StateInfoSnapshot `protobuf:"bytes,16,opt,name=state_snapshot,json=stateSnapshot,oneof"`
}
type GossipMessage_StateInfoPullReq struct {
	StateInfoPullReq *StateInfoPullRequest `protobuf:"bytes,17,opt,name=state_info_pull_req,json=stateInfoPullReq,oneof"`
}
type GossipMessage_StateRequest struct {
	StateRequest *RemoteStateRequest `protobuf:"bytes,18,opt,name=state_request,json=stateRequest,oneof"`
}
type GossipMessage_StateResponse struct {
	StateResponse *RemoteStateResponse `protobuf:"bytes,19,opt,name=state_response,json=stateResponse,oneof"`
}
type GossipMessage_LeadershipMsg struct {
	LeadershipMsg *LeadershipMessage `protobuf:"bytes,20,opt,name=leadership_msg,json=leadershipMsg,oneof"`
}
type GossipMessage_PeerIdentity struct {
	PeerIdentity *PeerIdentity `protobuf:"bytes,21,opt,name=peer_identity,json=peerIdentity,oneof"`
}
type GossipMessage_Ack struct {
	Ack *Acknowledgement `protobuf:"bytes,22,opt,name=ack,oneof"`
}
type GossipMessage_PrivateReq struct {
	PrivateReq *RemotePvtDataRequest `protobuf:"bytes,23,opt,name=privateReq,oneof"`
}
type GossipMessage_PrivateRes struct {
	PrivateRes *RemotePvtDataResponse `protobuf:"bytes,24,opt,name=privateRes,oneof"`
}
type GossipMessage_PrivateData struct {
	PrivateData *PrivateDataMessage `protobuf:"bytes,25,opt,name=private_data,json=privateData,oneof"`
}
type GossipMessage_TransactionMsg struct {
	TransactionMsg *TransactionMessage `protobuf:"bytes,26,opt,name=transaction_msg,json=transactionMsg,oneof"`
}

func (*GossipMessage_AliveMsg) isGossipMessage_Content()         {}
func (*GossipMessage_MemReq) isGossipMessage_Content()           {}
func (*GossipMessage_MemRes) isGossipMessage_Content()           {}
func (*GossipMessage_DataMsg) isGossipMessage_Content()          {}
func (*GossipMessage_Hello) isGossipMessage_Content()            {}
func (*GossipMessage_DataDig) isGossipMessage_Content()          {}
func (*GossipMessage_DataReq) isGossipMessage_Content()          {}
func (*GossipMessage_DataUpdate) isGossipMessage_Content()       {}
func (*GossipMessage_Empty) isGossipMessage_Content()            {}
func (*GossipMessage_Conn) isGossipMessage_Content()             {}
func (*GossipMessage_StateInfo) isGossipMessage_Content()        {}
func (*GossipMessage_StateSnapshot) isGossipMessage_Content()    {}
func (*GossipMessage_StateInfoPullReq) isGossipMessage_Content() {}
func (*GossipMessage_StateRequest) isGossipMessage_Content()     {}
func (*GossipMessage_StateResponse) isGossipMessage_Content()    {}
func (*GossipMessage_LeadershipMsg) isGossipMessage_Content()    {}
func (*GossipMessage_PeerIdentity) isGossipMessage_Content()     {}
func (*GossipMessage_Ack) isGossipMessage_Content()              {}
func (*GossipMessage_PrivateReq) isGossipMessage_Content()       {}
func (*GossipMessage_PrivateRes) isGossipMessage_Content()       {}
func (*GossipMessage_PrivateData) isGossipMessage_Content()      {}
func (*GossipMessage_TransactionMsg) isGossipMessage_Content()   {}

func (m *GossipMessage) GetContent() isGossipMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *GossipMessage) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GossipMessage) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GossipMessage) GetTag() GossipMessage_Tag {
	if m != nil {
		return m.Tag
	}
	return GossipMessage_UNDEFINED
}

func (m *GossipMessage) GetAliveMsg() *AliveMessage {
	if x, ok := m.GetContent().(*GossipMessage_AliveMsg); ok {
		return x.AliveMsg
	}
	return nil
}

func (m *GossipMessage) GetMemReq() *MembershipRequest {
	if x, ok := m.GetContent().(*GossipMessage_MemReq); ok {
		return x.MemReq
	}
	return nil
}

func (m *GossipMessage) GetMemRes() *MembershipResponse {
	if x, ok := m.GetContent().(*GossipMessage_MemRes); ok {
		return x.MemRes
	}
	return nil
}

func (m *GossipMessage) GetDataMsg() *DataMessage {
	if x, ok := m.GetContent().(*GossipMessage_DataMsg); ok {
		return x.DataMsg
	}
	return nil
}

func (m *GossipMessage) GetHello() *GossipHello {
	if x, ok := m.GetContent().(*GossipMessage_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *GossipMessage) GetDataDig() *DataDigest {
	if x, ok := m.GetContent().(*GossipMessage_DataDig); ok {
		return x.DataDig
	}
	return nil
}

func (m *GossipMessage) GetDataReq() *DataRequest {
	if x, ok := m.GetContent().(*GossipMessage_DataReq); ok {
		return x.DataReq
	}
	return nil
}

func (m *GossipMessage) GetDataUpdate() *DataUpdate {
	if x, ok := m.GetContent().(*GossipMessage_DataUpdate); ok {
		return x.DataUpdate
	}
	return nil
}

func (m *GossipMessage) GetEmpty() *Empty {
	if x, ok := m.GetContent().(*GossipMessage_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *GossipMessage) GetConn() *ConnEstablish {
	if x, ok := m.GetContent().(*GossipMessage_Conn); ok {
		return x.Conn
	}
	return nil
}

func (m *GossipMessage) GetStateInfo() *StateInfo {
	if x, ok := m.GetContent().(*GossipMessage_StateInfo); ok {
		return x.StateInfo
	}
	return nil
}

func (m *GossipMessage) GetStateSnapshot() *StateInfoSnapshot {
	if x, ok := m.GetContent().(*GossipMessage_StateSnapshot); ok {
		return x.StateSnapshot
	}
	return nil
}

func (m *GossipMessage) GetStateInfoPullReq() *StateInfoPullRequest {
	if x, ok := m.GetContent().(*GossipMessage_StateInfoPullReq); ok {
		return x.StateInfoPullReq
	}
	return nil
}

func (m *GossipMessage) GetStateRequest() *RemoteStateRequest {
	if x, ok := m.GetContent().(*GossipMessage_StateRequest); ok {
		return x.StateRequest
	}
	return nil
}

func (m *GossipMessage) GetStateResponse() *RemoteStateResponse {
	if x, ok := m.GetContent().(*GossipMessage_StateResponse); ok {
		return x.StateResponse
	}
	return nil
}

func (m *GossipMessage) GetLeadershipMsg() *LeadershipMessage {
	if x, ok := m.GetContent().(*GossipMessage_LeadershipMsg); ok {
		return x.LeadershipMsg
	}
	return nil
}

func (m *GossipMessage) GetPeerIdentity() *PeerIdentity {
	if x, ok := m.GetContent().(*GossipMessage_PeerIdentity); ok {
		return x.PeerIdentity
	}
	return nil
}

func (m *GossipMessage) GetAck() *Acknowledgement {
	if x, ok := m.GetContent().(*GossipMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *GossipMessage) GetPrivateReq() *RemotePvtDataRequest {
	if x, ok := m.GetContent().(*GossipMessage_PrivateReq); ok {
		return x.PrivateReq
	}
	return nil
}

func (m *GossipMessage) GetPrivateRes() *RemotePvtDataResponse {
	if x, ok := m.GetContent().(*GossipMessage_PrivateRes); ok {
		return x.PrivateRes
	}
	return nil
}

func (m *GossipMessage) GetPrivateData() *PrivateDataMessage {
	if x, ok := m.GetContent().(*GossipMessage_PrivateData); ok {
		return x.PrivateData
	}
	return nil
}

func (m *GossipMessage) GetTransactionMsg() *TransactionMessage {
	if x, ok := m.GetContent().(*GossipMessage_TransactionMsg); ok {
		return x.TransactionMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GossipMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GossipMessage_OneofMarshaler, _GossipMessage_OneofUnmarshaler, _GossipMessage_OneofSizer, []interface{}{
		(*GossipMessage_AliveMsg)(nil),
		(*GossipMessage_MemReq)(nil),
		(*GossipMessage_MemRes)(nil),
		(*GossipMessage_DataMsg)(nil),
		(*GossipMessage_Hello)(nil),
		(*GossipMessage_DataDig)(nil),
		(*GossipMessage_DataReq)(nil),
		(*GossipMessage_DataUpdate)(nil),
		(*GossipMessage_Empty)(nil),
		(*GossipMessage_Conn)(nil),
		(*GossipMessage_StateInfo)(nil),
		(*GossipMessage_StateSnapshot)(nil),
		(*GossipMessage_StateInfoPullReq)(nil),
		(*GossipMessage_StateRequest)(nil),
		(*GossipMessage_StateResponse)(nil),
		(*GossipMessage_LeadershipMsg)(nil),
		(*GossipMessage_PeerIdentity)(nil),
		(*GossipMessage_Ack)(nil),
		(*GossipMessage_PrivateReq)(nil),
		(*GossipMessage_PrivateRes)(nil),
		(*GossipMessage_PrivateData)(nil),
		(*GossipMessage_TransactionMsg)(nil),
	}
}

func _GossipMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AliveMsg); err != nil {
			return err
		}
	case *GossipMessage_MemReq:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemReq); err != nil {
			return err
		}
	case *GossipMessage_MemRes:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MemRes); err != nil {
			return err
		}
	case *GossipMessage_DataMsg:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataMsg); err != nil {
			return err
		}
	case *GossipMessage_Hello:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {
			return err
		}
	case *GossipMessage_DataDig:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataDig); err != nil {
			return err
		}
	case *GossipMessage_DataReq:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataReq); err != nil {
			return err
		}
	case *GossipMessage_DataUpdate:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataUpdate); err != nil {
			return err
		}
	case *GossipMessage_Empty:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *GossipMessage_Conn:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conn); err != nil {
			return err
		}
	case *GossipMessage_StateInfo:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateInfo); err != nil {
			return err
		}
	case *GossipMessage_StateSnapshot:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateSnapshot); err != nil {
			return err
		}
	case *GossipMessage_StateInfoPullReq:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateInfoPullReq); err != nil {
			return err
		}
	case *GossipMessage_StateRequest:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateRequest); err != nil {
			return err
		}
	case *GossipMessage_StateResponse:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StateResponse); err != nil {
			return err
		}
	case *GossipMessage_LeadershipMsg:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeadershipMsg); err != nil {
			return err
		}
	case *GossipMessage_PeerIdentity:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerIdentity); err != nil {
			return err
		}
	case *GossipMessage_Ack:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *GossipMessage_PrivateReq:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateReq); err != nil {
			return err
		}
	case *GossipMessage_PrivateRes:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateRes); err != nil {
			return err
		}
	case *GossipMessage_PrivateData:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrivateData); err != nil {
			return err
		}
	case *GossipMessage_TransactionMsg:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransactionMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GossipMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _GossipMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GossipMessage)
	switch tag {
	case 5: // content.alive_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AliveMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_AliveMsg{msg}
		return true, err
	case 6: // content.mem_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MembershipRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemReq{msg}
		return true, err
	case 7: // content.mem_res
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MembershipResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_MemRes{msg}
		return true, err
	case 8: // content.data_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataMsg{msg}
		return true, err
	case 9: // content.hello
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GossipHello)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Hello{msg}
		return true, err
	case 10: // content.data_dig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataDigest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataDig{msg}
		return true, err
	case 11: // content.data_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataReq{msg}
		return true, err
	case 12: // content.data_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataUpdate)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_DataUpdate{msg}
		return true, err
	case 13: // content.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Empty{msg}
		return true, err
	case 14: // content.conn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnEstablish)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Conn{msg}
		return true, err
	case 15: // content.state_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateInfo)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfo{msg}
		return true, err
	case 16: // content.state_snapshot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateInfoSnapshot)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateSnapshot{msg}
		return true, err
	case 17: // content.state_info_pull_req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StateInfoPullRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateInfoPullReq{msg}
		return true, err
	case 18: // content.state_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoteStateRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateRequest{msg}
		return true, err
	case 19: // content.state_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoteStateResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_StateResponse{msg}
		return true, err
	case 20: // content.leadership_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LeadershipMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_LeadershipMsg{msg}
		return true, err
	case 21: // content.peer_identity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerIdentity)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PeerIdentity{msg}
		return true, err
	case 22: // content.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Acknowledgement)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_Ack{msg}
		return true, err
	case 23: // content.privateReq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemotePvtDataRequest)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateReq{msg}
		return true, err
	case 24: // content.privateRes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemotePvtDataResponse)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateRes{msg}
		return true, err
	case 25: // content.private_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrivateDataMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_PrivateData{msg}
		return true, err
	case 26: // content.transaction_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionMessage)
		err := b.DecodeMessage(msg)
		m.Content = &GossipMessage_TransactionMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GossipMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GossipMessage)
	// content
	switch x := m.Content.(type) {
	case *GossipMessage_AliveMsg:
		s := proto.Size(x.AliveMsg)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemReq:
		s := proto.Size(x.MemReq)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_MemRes:
		s := proto.Size(x.MemRes)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataMsg:
		s := proto.Size(x.DataMsg)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Hello:
		s := proto.Size(x.Hello)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataDig:
		s := proto.Size(x.DataDig)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataReq:
		s := proto.Size(x.DataReq)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_DataUpdate:
		s := proto.Size(x.DataUpdate)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Conn:
		s := proto.Size(x.Conn)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfo:
		s := proto.Size(x.StateInfo)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateSnapshot:
		s := proto.Size(x.StateSnapshot)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateInfoPullReq:
		s := proto.Size(x.StateInfoPullReq)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateRequest:
		s := proto.Size(x.StateRequest)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_StateResponse:
		s := proto.Size(x.StateResponse)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_LeadershipMsg:
		s := proto.Size(x.LeadershipMsg)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PeerIdentity:
		s := proto.Size(x.PeerIdentity)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateReq:
		s := proto.Size(x.PrivateReq)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateRes:
		s := proto.Size(x.PrivateRes)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_PrivateData:
		s := proto.Size(x.PrivateData)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipMessage_TransactionMsg:
		s := proto.Size(x.TransactionMsg)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// StateInfo is used for a peer to relay its state information
// to other peers
type StateInfo struct {
	Timestamp *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	PkiId     []byte    `protobuf:"bytes,3,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	// channel_MAC is an authentication code that proves
	// that the peer that sent this message knows
	// the name of the channel.
	Channel_MAC []byte      `protobuf:"bytes,4,opt,name=channel_MAC,json=channelMAC,proto3" json:"channel_MAC,omitempty"`
	Properties  *Properties `protobuf:"bytes,5,opt,name=properties" json:"properties,omitempty"`
}

func (m *StateInfo) Reset()                    { *m = StateInfo{} }
func (m *StateInfo) String() string            { return proto.CompactTextString(m) }
func (*StateInfo) ProtoMessage()               {}
func (*StateInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *StateInfo) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *StateInfo) GetPkiId() []byte {
	if m != nil {
		return m.PkiId
	}
	return nil
}

func (m *StateInfo) GetChannel_MAC() []byte {
	if m != nil {
		return m.Channel_MAC
	}
	return nil
}

func (m *StateInfo) GetProperties() *Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type Properties struct {
	DsLedgerHeight uint64       `protobuf:"varint,1,opt,name=ds_ledger_height,json=dsLedgerHeight" json:"ds_ledger_height,omitempty"`
	TxLedgerHeight uint64       `protobuf:"varint,2,opt,name=tx_ledger_height,json=txLedgerHeight" json:"tx_ledger_height,omitempty"`
	LeftChannel    bool         `protobuf:"varint,3,opt,name=left_channel,json=leftChannel" json:"left_channel,omitempty"`
	Chaincodes     []*Chaincode `protobuf:"bytes,4,rep,name=chaincodes" json:"chaincodes,omitempty"`
}

func (m *Properties) Reset()                    { *m = Properties{} }
func (m *Properties) String() string            { return proto.CompactTextString(m) }
func (*Properties) ProtoMessage()               {}
func (*Properties) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Properties) GetDsLedgerHeight() uint64 {
	if m != nil {
		return m.DsLedgerHeight
	}
	return 0
}

func (m *Properties) GetTxLedgerHeight() uint64 {
	if m != nil {
		return m.TxLedgerHeight
	}
	return 0
}

func (m *Properties) GetLeftChannel() bool {
	if m != nil {
		return m.LeftChannel
	}
	return false
}

func (m *Properties) GetChaincodes() []*Chaincode {
	if m != nil {
		return m.Chaincodes
	}
	return nil
}

// StateInfoSnapshot is an aggregation of StateInfo messages
type StateInfoSnapshot struct {
	Elements []*Envelope `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *StateInfoSnapshot) Reset()                    { *m = StateInfoSnapshot{} }
func (m *StateInfoSnapshot) String() string            { return proto.CompactTextString(m) }
func (*StateInfoSnapshot) ProtoMessage()               {}
func (*StateInfoSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *StateInfoSnapshot) GetElements() []*Envelope {
	if m != nil {
		return m.Elements
	}
	return nil
}

// StateInfoPullRequest is used to fetch a StateInfoSnapshot
// from a remote peer
type StateInfoPullRequest struct {
	// channel_MAC is an authentication code that proves
	// that the peer that sent this message knows
	// the name of the channel.
	Channel_MAC []byte `protobuf:"bytes,1,opt,name=channel_MAC,json=channelMAC,proto3" json:"channel_MAC,omitempty"`
}

func (m *StateInfoPullRequest) Reset()                    { *m = StateInfoPullRequest{} }
func (m *StateInfoPullRequest) String() string            { return proto.CompactTextString(m) }
func (*StateInfoPullRequest) ProtoMessage()               {}
func (*StateInfoPullRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *StateInfoPullRequest) GetChannel_MAC() []byte {
	if m != nil {
		return m.Channel_MAC
	}
	return nil
}

// ConnEstablish is the message used for the gossip handshake
// Whenever a peer connects to another peer, it handshakes
// with it by sending this message that proves its identity
type ConnEstablish struct {
	PkiId       []byte `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Identity    []byte `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	TlsCertHash []byte `protobuf:"bytes,3,opt,name=tls_cert_hash,json=tlsCertHash,proto3" json:"tls_cert_hash,omitempty"`
}

func (m *ConnEstablish) Reset()                    { *m = ConnEstablish{} }
func (m *ConnEstablish) String() string            { return proto.CompactTextString(m) }
func (*ConnEstablish) ProtoMessage()               {}
func (*ConnEstablish) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ConnEstablish) GetPkiId() []byte {
	if m != nil {
		return m.PkiId
	}
	return nil
}

func (m *ConnEstablish) GetIdentity() []byte {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *ConnEstablish) GetTlsCertHash() []byte {
	if m != nil {
		return m.TlsCertHash
	}
	return nil
}

// PeerIdentity defines the identity of the peer
// Used to make other peers learn of the identity
// of a certain peer
type PeerIdentity struct {
	PkiId    []byte `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Cert     []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Metadata []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *PeerIdentity) Reset()                    { *m = PeerIdentity{} }
func (m *PeerIdentity) String() string            { return proto.CompactTextString(m) }
func (*PeerIdentity) ProtoMessage()               {}
func (*PeerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *PeerIdentity) GetPkiId() []byte {
	if m != nil {
		return m.PkiId
	}
	return nil
}

func (m *PeerIdentity) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *PeerIdentity) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// DataRequest is a message used for a peer to request
// certain data blocks from a remote peer
type DataRequest struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Digests []string    `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	MsgType PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,enum=protos.PullMsgType" json:"msg_type,omitempty"`
}

func (m *DataRequest) Reset()                    { *m = DataRequest{} }
func (m *DataRequest) String() string            { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()               {}
func (*DataRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *DataRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DataRequest) GetDigests() []string {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *DataRequest) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

// GossipHello is the message that is used for the peer to initiate
// a pull round with another peer
type GossipHello struct {
	Nonce    uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Metadata []byte      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MsgType  PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,enum=protos.PullMsgType" json:"msg_type,omitempty"`
}

func (m *GossipHello) Reset()                    { *m = GossipHello{} }
func (m *GossipHello) String() string            { return proto.CompactTextString(m) }
func (*GossipHello) ProtoMessage()               {}
func (*GossipHello) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *GossipHello) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GossipHello) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *GossipHello) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

// DataUpdate is the final message in the pull phase
// sent from the receiver to the initiator
type DataUpdate struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Data    []*Envelope `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	MsgType PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,enum=protos.PullMsgType" json:"msg_type,omitempty"`
}

func (m *DataUpdate) Reset()                    { *m = DataUpdate{} }
func (m *DataUpdate) String() string            { return proto.CompactTextString(m) }
func (*DataUpdate) ProtoMessage()               {}
func (*DataUpdate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *DataUpdate) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DataUpdate) GetData() []*Envelope {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DataUpdate) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

// DataDigest is the message sent from the receiver peer
// to the initator peer and contains the data items it has
type DataDigest struct {
	Nonce   uint64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Digests []string    `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	MsgType PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,enum=protos.PullMsgType" json:"msg_type,omitempty"`
}

func (m *DataDigest) Reset()                    { *m = DataDigest{} }
func (m *DataDigest) String() string            { return proto.CompactTextString(m) }
func (*DataDigest) ProtoMessage()               {}
func (*DataDigest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *DataDigest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *DataDigest) GetDigests() []string {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *DataDigest) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

// DataMessage is the message that contains a block
type DataMessage struct {
	Payload *Payload `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *DataMessage) Reset()                    { *m = DataMessage{} }
func (m *DataMessage) String() string            { return proto.CompactTextString(m) }
func (*DataMessage) ProtoMessage()               {}
func (*DataMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *DataMessage) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

// PrivateDataMessage message which includes private
// data information to distributed once transaction
// has been endorsed
type PrivateDataMessage struct {
	Payload *PrivatePayload `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *PrivateDataMessage) Reset()                    { *m = PrivateDataMessage{} }
func (m *PrivateDataMessage) String() string            { return proto.CompactTextString(m) }
func (*PrivateDataMessage) ProtoMessage()               {}
func (*PrivateDataMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *PrivateDataMessage) GetPayload() *PrivatePayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Payload contains a block
type Payload struct {
	SeqNum      uint64   `protobuf:"varint,1,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	Data        []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	PrivateData [][]byte `protobuf:"bytes,3,rep,name=private_data,json=privateData,proto3" json:"private_data,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *Payload) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Payload) GetPrivateData() [][]byte {
	if m != nil {
		return m.PrivateData
	}
	return nil
}

// PrivatePayload payload to encapsulate private
// data with collection name to enable routing
// based on collection partitioning
type PrivatePayload struct {
	CollectionName   string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName" json:"collection_name,omitempty"`
	Namespace        string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	TxId             string `protobuf:"bytes,3,opt,name=tx_id,json=txId" json:"tx_id,omitempty"`
	PrivateRwset     []byte `protobuf:"bytes,4,opt,name=private_rwset,json=privateRwset,proto3" json:"private_rwset,omitempty"`
	PrivateSimHeight uint64 `protobuf:"varint,5,opt,name=private_sim_height,json=privateSimHeight" json:"private_sim_height,omitempty"`
}

func (m *PrivatePayload) Reset()                    { *m = PrivatePayload{} }
func (m *PrivatePayload) String() string            { return proto.CompactTextString(m) }
func (*PrivatePayload) ProtoMessage()               {}
func (*PrivatePayload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *PrivatePayload) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *PrivatePayload) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PrivatePayload) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *PrivatePayload) GetPrivateRwset() []byte {
	if m != nil {
		return m.PrivateRwset
	}
	return nil
}

func (m *PrivatePayload) GetPrivateSimHeight() uint64 {
	if m != nil {
		return m.PrivateSimHeight
	}
	return 0
}

// AliveMessage is sent to inform remote peers
// of a peer's existence and activity
type AliveMessage struct {
	Membership *Member   `protobuf:"bytes,1,opt,name=membership" json:"membership,omitempty"`
	Timestamp  *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Identity   []byte    `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *AliveMessage) Reset()                    { *m = AliveMessage{} }
func (m *AliveMessage) String() string            { return proto.CompactTextString(m) }
func (*AliveMessage) ProtoMessage()               {}
func (*AliveMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *AliveMessage) GetMembership() *Member {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (m *AliveMessage) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *AliveMessage) GetIdentity() []byte {
	if m != nil {
		return m.Identity
	}
	return nil
}

// Leadership Message is sent during leader election to inform
// remote peers about intent of peer to proclaim itself as leader
type LeadershipMessage struct {
	PkiId         []byte    `protobuf:"bytes,1,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
	Timestamp     *PeerTime `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	IsDeclaration bool      `protobuf:"varint,3,opt,name=is_declaration,json=isDeclaration" json:"is_declaration,omitempty"`
}

func (m *LeadershipMessage) Reset()                    { *m = LeadershipMessage{} }
func (m *LeadershipMessage) String() string            { return proto.CompactTextString(m) }
func (*LeadershipMessage) ProtoMessage()               {}
func (*LeadershipMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *LeadershipMessage) GetPkiId() []byte {
	if m != nil {
		return m.PkiId
	}
	return nil
}

func (m *LeadershipMessage) GetTimestamp() *PeerTime {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LeadershipMessage) GetIsDeclaration() bool {
	if m != nil {
		return m.IsDeclaration
	}
	return false
}

// PeerTime defines the logical time of a peer's life
type PeerTime struct {
	IncNum uint64 `protobuf:"varint,1,opt,name=inc_num,json=incNum" json:"inc_num,omitempty"`
	SeqNum uint64 `protobuf:"varint,2,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
}

func (m *PeerTime) Reset()                    { *m = PeerTime{} }
func (m *PeerTime) String() string            { return proto.CompactTextString(m) }
func (*PeerTime) ProtoMessage()               {}
func (*PeerTime) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *PeerTime) GetIncNum() uint64 {
	if m != nil {
		return m.IncNum
	}
	return 0
}

func (m *PeerTime) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

// MembershipRequest is used to ask membership information
// from a remote peer
type MembershipRequest struct {
	SelfInformation *Envelope `protobuf:"bytes,1,opt,name=self_information,json=selfInformation" json:"self_information,omitempty"`
	Known           [][]byte  `protobuf:"bytes,2,rep,name=known,proto3" json:"known,omitempty"`
}

func (m *MembershipRequest) Reset()                    { *m = MembershipRequest{} }
func (m *MembershipRequest) String() string            { return proto.CompactTextString(m) }
func (*MembershipRequest) ProtoMessage()               {}
func (*MembershipRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *MembershipRequest) GetSelfInformation() *Envelope {
	if m != nil {
		return m.SelfInformation
	}
	return nil
}

func (m *MembershipRequest) GetKnown() [][]byte {
	if m != nil {
		return m.Known
	}
	return nil
}

// MembershipResponse is used for replying to MembershipRequests
type MembershipResponse struct {
	Alive []*Envelope `protobuf:"bytes,1,rep,name=alive" json:"alive,omitempty"`
	Dead  []*Envelope `protobuf:"bytes,2,rep,name=dead" json:"dead,omitempty"`
}

func (m *MembershipResponse) Reset()                    { *m = MembershipResponse{} }
func (m *MembershipResponse) String() string            { return proto.CompactTextString(m) }
func (*MembershipResponse) ProtoMessage()               {}
func (*MembershipResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *MembershipResponse) GetAlive() []*Envelope {
	if m != nil {
		return m.Alive
	}
	return nil
}

func (m *MembershipResponse) GetDead() []*Envelope {
	if m != nil {
		return m.Dead
	}
	return nil
}

// Member holds membership-related information
// about a peer
type Member struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PkiId    []byte `protobuf:"bytes,3,opt,name=pki_id,json=pkiId,proto3" json:"pki_id,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *Member) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Member) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Member) GetPkiId() []byte {
	if m != nil {
		return m.PkiId
	}
	return nil
}

// Empty is used for pinging and in tests
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

// RemoteStateRequest is used to ask a set of blocks
// from a remote peer
type RemoteStateRequest struct {
	StartSeqNum uint64 `protobuf:"varint,1,opt,name=start_seq_num,json=startSeqNum" json:"start_seq_num,omitempty"`
	EndSeqNum   uint64 `protobuf:"varint,2,opt,name=end_seq_num,json=endSeqNum" json:"end_seq_num,omitempty"`
	IsDsBlock   bool   `protobuf:"varint,3,opt,name=is_ds_block,json=isDsBlock" json:"is_ds_block,omitempty"`
}

func (m *RemoteStateRequest) Reset()                    { *m = RemoteStateRequest{} }
func (m *RemoteStateRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteStateRequest) ProtoMessage()               {}
func (*RemoteStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *RemoteStateRequest) GetStartSeqNum() uint64 {
	if m != nil {
		return m.StartSeqNum
	}
	return 0
}

func (m *RemoteStateRequest) GetEndSeqNum() uint64 {
	if m != nil {
		return m.EndSeqNum
	}
	return 0
}

func (m *RemoteStateRequest) GetIsDsBlock() bool {
	if m != nil {
		return m.IsDsBlock
	}
	return false
}

// RemoteStateResponse is used to send a set of blocks
// to a remote peer
type RemoteStateResponse struct {
	Payloads  []*Payload `protobuf:"bytes,1,rep,name=payloads" json:"payloads,omitempty"`
	IsDsBlock bool       `protobuf:"varint,2,opt,name=is_ds_block,json=isDsBlock" json:"is_ds_block,omitempty"`
}

func (m *RemoteStateResponse) Reset()                    { *m = RemoteStateResponse{} }
func (m *RemoteStateResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoteStateResponse) ProtoMessage()               {}
func (*RemoteStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *RemoteStateResponse) GetPayloads() []*Payload {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *RemoteStateResponse) GetIsDsBlock() bool {
	if m != nil {
		return m.IsDsBlock
	}
	return false
}

// RemotePrivateDataRequest message used to request
// missing private rwset
type RemotePvtDataRequest struct {
	Digests []*PvtDataDigest `protobuf:"bytes,1,rep,name=digests" json:"digests,omitempty"`
}

func (m *RemotePvtDataRequest) Reset()                    { *m = RemotePvtDataRequest{} }
func (m *RemotePvtDataRequest) String() string            { return proto.CompactTextString(m) }
func (*RemotePvtDataRequest) ProtoMessage()               {}
func (*RemotePvtDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *RemotePvtDataRequest) GetDigests() []*PvtDataDigest {
	if m != nil {
		return m.Digests
	}
	return nil
}

// PvtDataDigest defines a digest of private data
type PvtDataDigest struct {
	TxId       string `protobuf:"bytes,1,opt,name=tx_id,json=txId" json:"tx_id,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Collection string `protobuf:"bytes,3,opt,name=collection" json:"collection,omitempty"`
	BlockSeq   uint64 `protobuf:"varint,4,opt,name=block_seq,json=blockSeq" json:"block_seq,omitempty"`
	SeqInBlock uint64 `protobuf:"varint,5,opt,name=seq_in_block,json=seqInBlock" json:"seq_in_block,omitempty"`
}

func (m *PvtDataDigest) Reset()                    { *m = PvtDataDigest{} }
func (m *PvtDataDigest) String() string            { return proto.CompactTextString(m) }
func (*PvtDataDigest) ProtoMessage()               {}
func (*PvtDataDigest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *PvtDataDigest) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *PvtDataDigest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PvtDataDigest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *PvtDataDigest) GetBlockSeq() uint64 {
	if m != nil {
		return m.BlockSeq
	}
	return 0
}

func (m *PvtDataDigest) GetSeqInBlock() uint64 {
	if m != nil {
		return m.SeqInBlock
	}
	return 0
}

// RemotePrivateData message to response on private
// data replication request
type RemotePvtDataResponse struct {
	Elements []*PvtDataElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *RemotePvtDataResponse) Reset()                    { *m = RemotePvtDataResponse{} }
func (m *RemotePvtDataResponse) String() string            { return proto.CompactTextString(m) }
func (*RemotePvtDataResponse) ProtoMessage()               {}
func (*RemotePvtDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *RemotePvtDataResponse) GetElements() []*PvtDataElement {
	if m != nil {
		return m.Elements
	}
	return nil
}

type PvtDataElement struct {
	Digest *PvtDataDigest `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	// the payload is a marshaled kvrwset.KVRWSet
	Payload [][]byte `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PvtDataElement) Reset()                    { *m = PvtDataElement{} }
func (m *PvtDataElement) String() string            { return proto.CompactTextString(m) }
func (*PvtDataElement) ProtoMessage()               {}
func (*PvtDataElement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *PvtDataElement) GetDigest() *PvtDataDigest {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PvtDataElement) GetPayload() [][]byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// PvtPayload augments private rwset data and tx index
// inside the block
type PvtDataPayload struct {
	TxSeqInBlock uint64 `protobuf:"varint,1,opt,name=tx_seq_in_block,json=txSeqInBlock" json:"tx_seq_in_block,omitempty"`
	// Encodes marhslaed bytes of rwset.TxPvtReadWriteSet
	// defined in rwset.proto
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PvtDataPayload) Reset()                    { *m = PvtDataPayload{} }
func (m *PvtDataPayload) String() string            { return proto.CompactTextString(m) }
func (*PvtDataPayload) ProtoMessage()               {}
func (*PvtDataPayload) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *PvtDataPayload) GetTxSeqInBlock() uint64 {
	if m != nil {
		return m.TxSeqInBlock
	}
	return 0
}

func (m *PvtDataPayload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Acknowledgement struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *Acknowledgement) Reset()                    { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string            { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()               {}
func (*Acknowledgement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *Acknowledgement) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Chaincode represents a Chaincode that is installed
// on a peer
type Chaincode struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Metadata []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Chaincode) Reset()                    { *m = Chaincode{} }
func (m *Chaincode) String() string            { return proto.CompactTextString(m) }
func (*Chaincode) ProtoMessage()               {}
func (*Chaincode) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *Chaincode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chaincode) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Chaincode) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TransactionMessage struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *TransactionMessage) Reset()                    { *m = TransactionMessage{} }
func (m *TransactionMessage) String() string            { return proto.CompactTextString(m) }
func (*TransactionMessage) ProtoMessage()               {}
func (*TransactionMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *TransactionMessage) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "protos.Envelope")
	proto.RegisterType((*SecretEnvelope)(nil), "protos.SecretEnvelope")
	proto.RegisterType((*Secret)(nil), "protos.Secret")
	proto.RegisterType((*GossipMessage)(nil), "protos.GossipMessage")
	proto.RegisterType((*StateInfo)(nil), "protos.StateInfo")
	proto.RegisterType((*Properties)(nil), "protos.Properties")
	proto.RegisterType((*StateInfoSnapshot)(nil), "protos.StateInfoSnapshot")
	proto.RegisterType((*StateInfoPullRequest)(nil), "protos.StateInfoPullRequest")
	proto.RegisterType((*ConnEstablish)(nil), "protos.ConnEstablish")
	proto.RegisterType((*PeerIdentity)(nil), "protos.PeerIdentity")
	proto.RegisterType((*DataRequest)(nil), "protos.DataRequest")
	proto.RegisterType((*GossipHello)(nil), "protos.GossipHello")
	proto.RegisterType((*DataUpdate)(nil), "protos.DataUpdate")
	proto.RegisterType((*DataDigest)(nil), "protos.DataDigest")
	proto.RegisterType((*DataMessage)(nil), "protos.DataMessage")
	proto.RegisterType((*PrivateDataMessage)(nil), "protos.PrivateDataMessage")
	proto.RegisterType((*Payload)(nil), "protos.Payload")
	proto.RegisterType((*PrivatePayload)(nil), "protos.PrivatePayload")
	proto.RegisterType((*AliveMessage)(nil), "protos.AliveMessage")
	proto.RegisterType((*LeadershipMessage)(nil), "protos.LeadershipMessage")
	proto.RegisterType((*PeerTime)(nil), "protos.PeerTime")
	proto.RegisterType((*MembershipRequest)(nil), "protos.MembershipRequest")
	proto.RegisterType((*MembershipResponse)(nil), "protos.MembershipResponse")
	proto.RegisterType((*Member)(nil), "protos.Member")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
	proto.RegisterType((*RemoteStateRequest)(nil), "protos.RemoteStateRequest")
	proto.RegisterType((*RemoteStateResponse)(nil), "protos.RemoteStateResponse")
	proto.RegisterType((*RemotePvtDataRequest)(nil), "protos.RemotePvtDataRequest")
	proto.RegisterType((*PvtDataDigest)(nil), "protos.PvtDataDigest")
	proto.RegisterType((*RemotePvtDataResponse)(nil), "protos.RemotePvtDataResponse")
	proto.RegisterType((*PvtDataElement)(nil), "protos.PvtDataElement")
	proto.RegisterType((*PvtDataPayload)(nil), "protos.PvtDataPayload")
	proto.RegisterType((*Acknowledgement)(nil), "protos.Acknowledgement")
	proto.RegisterType((*Chaincode)(nil), "protos.Chaincode")
	proto.RegisterType((*TransactionMessage)(nil), "protos.TransactionMessage")
	proto.RegisterEnum("protos.PullMsgType", PullMsgType_name, PullMsgType_value)
	proto.RegisterEnum("protos.GossipMessage_Tag", GossipMessage_Tag_name, GossipMessage_Tag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gossip service

type GossipClient interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error)
	// Gossip Priority stream
	GossipPriStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipPriStreamClient, error)
	// Ping is used to probe a remote peer's aliveness
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) GossipStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gossip_serviceDesc.Streams[0], c.cc, "/protos.Gossip/GossipStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipGossipStreamClient{stream}
	return x, nil
}

type Gossip_GossipStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type gossipGossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipGossipStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipGossipStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipClient) GossipPriStream(ctx context.Context, opts ...grpc.CallOption) (Gossip_GossipPriStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gossip_serviceDesc.Streams[1], c.cc, "/protos.Gossip/GossipPriStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipGossipPriStreamClient{stream}
	return x, nil
}

type Gossip_GossipPriStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type gossipGossipPriStreamClient struct {
	grpc.ClientStream
}

func (x *gossipGossipPriStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipGossipPriStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gossipClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protos.Gossip/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gossip service

type GossipServer interface {
	// GossipStream is the gRPC stream used for sending and receiving messages
	GossipStream(Gossip_GossipStreamServer) error
	// Gossip Priority stream
	GossipPriStream(Gossip_GossipPriStreamServer) error
	// Ping is used to probe a remote peer's aliveness
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_GossipStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).GossipStream(&gossipGossipStreamServer{stream})
}

type Gossip_GossipStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type gossipGossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipGossipStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipGossipStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gossip_GossipPriStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).GossipPriStream(&gossipGossipPriStreamServer{stream})
}

type Gossip_GossipPriStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type gossipGossipPriStreamServer struct {
	grpc.ServerStream
}

func (x *gossipGossipPriStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipGossipPriStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gossip_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Gossip/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gossip_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GossipStream",
			Handler:       _Gossip_GossipStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GossipPriStream",
			Handler:       _Gossip_GossipPriStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x72, 0xdb, 0xb8,
	0x15, 0x16, 0x6d, 0xfd, 0xf1, 0xe8, 0xd7, 0xb0, 0x93, 0x70, 0xbd, 0xdb, 0xad, 0x97, 0x6d, 0x76,
	0xdd, 0x26, 0xf5, 0xa6, 0xde, 0x76, 0xba, 0x33, 0x69, 0x9b, 0x71, 0x2c, 0xad, 0xa5, 0x49, 0xe4,
	0xb8, 0xb4, 0x33, 0x1d, 0x5f, 0x71, 0x60, 0x11, 0x96, 0x38, 0x26, 0x41, 0x9a, 0x80, 0xbd, 0xf6,
	0x65, 0xa7, 0x77, 0x7d, 0x8b, 0x5e, 0xed, 0x1b, 0xf4, 0xb6, 0x6f, 0xd0, 0x67, 0xea, 0x00, 0xe0,
	0x0f, 0x28, 0xc9, 0x99, 0x49, 0x66, 0xf6, 0x4a, 0x3a, 0xff, 0xc0, 0xc1, 0xc1, 0x77, 0x0e, 0x08,
	0x9d, 0x90, 0x30, 0x86, 0x67, 0x64, 0x2f, 0x4e, 0x22, 0x1e, 0xa1, 0xba, 0xfc, 0x61, 0xdb, 0x9d,
	0xe8, 0x6a, 0x3a, 0xc7, 0x3e, 0x55, 0x6c, 0xfb, 0x9f, 0x06, 0x34, 0x87, 0xf4, 0x96, 0x04, 0x51,
	0x4c, 0x90, 0x05, 0x8d, 0x18, 0xdf, 0x07, 0x11, 0xf6, 0x2c, 0x63, 0xc7, 0xd8, 0x6d, 0x3b, 0x19,
	0x89, 0xbe, 0x00, 0x93, 0xf9, 0x33, 0x8a, 0xf9, 0x4d, 0x42, 0xac, 0x35, 0x29, 0x2b, 0x18, 0xe8,
	0x15, 0xf4, 0x18, 0x99, 0x26, 0x84, 0xbb, 0x24, 0x75, 0x65, 0xad, 0xef, 0x18, 0xbb, 0xad, 0xfd,
	0xc7, 0x2a, 0x0a, 0xdb, 0x3b, 0x95, 0xe2, 0x2c, 0x90, 0xd3, 0x65, 0x25, 0xda, 0x1e, 0x41, 0xb7,
	0xac, 0xf1, 0xa9, 0x4b, 0xb1, 0x0f, 0xa0, 0xae, 0x3c, 0xa1, 0xe7, 0xd0, 0xf7, 0x29, 0x27, 0x09,
	0xc5, 0xc1, 0x90, 0x7a, 0x71, 0xe4, 0x53, 0x2e, 0x5d, 0x99, 0xa3, 0x8a, 0xb3, 0x24, 0x79, 0x6d,
	0x42, 0x63, 0x1a, 0x51, 0x4e, 0x28, 0xb7, 0xff, 0xd7, 0x82, 0xce, 0x51, 0xc4, 0x98, 0x1f, 0x4f,
	0x54, 0x06, 0xd1, 0x16, 0xd4, 0x68, 0x44, 0xa7, 0x44, 0xda, 0x57, 0x1d, 0x45, 0x88, 0x25, 0x4e,
	0xe7, 0x98, 0x52, 0x12, 0xa4, 0xcb, 0xc8, 0x48, 0xf4, 0x0c, 0xd6, 0x39, 0x9e, 0xc9, 0x1c, 0x74,
	0xf7, 0x3f, 0xcb, 0x72, 0x50, 0xf2, 0xb9, 0x77, 0x86, 0x67, 0x8e, 0xd0, 0x42, 0xdf, 0x81, 0x89,
	0x03, 0xff, 0x96, 0xb8, 0x21, 0x9b, 0x59, 0x35, 0x99, 0xb6, 0xad, 0xcc, 0xe4, 0x40, 0x08, 0x52,
	0x8b, 0x51, 0xc5, 0x69, 0x4a, 0xc5, 0x09, 0x9b, 0xa1, 0x3f, 0x40, 0x23, 0x24, 0xa1, 0x9b, 0x90,
	0x6b, 0xab, 0x2e, 0x4d, 0xf2, 0x28, 0x13, 0x12, 0x5e, 0x90, 0x84, 0xcd, 0xfd, 0xd8, 0x21, 0xd7,
	0x37, 0x84, 0xf1, 0x51, 0xc5, 0xa9, 0x87, 0x24, 0x74, 0xc8, 0x35, 0xfa, 0x63, 0x66, 0xc5, 0xac,
	0x86, 0xb4, 0xda, 0x5e, 0x65, 0xc5, 0xe2, 0x88, 0x32, 0x92, 0x9b, 0x31, 0xf4, 0x02, 0x9a, 0x1e,
	0xe6, 0x58, 0x2e, 0xb0, 0x29, 0xed, 0x36, 0x33, 0xbb, 0x01, 0xe6, 0xb8, 0x58, 0x5f, 0x43, 0xa8,
	0x89, 0xe5, 0x3d, 0x83, 0xda, 0x9c, 0x04, 0x41, 0x64, 0x99, 0x65, 0x75, 0x95, 0x82, 0x91, 0x10,
	0x8d, 0x2a, 0x8e, 0xd2, 0x41, 0xdf, 0xa6, 0xee, 0x3d, 0x7f, 0x66, 0x81, 0xd4, 0x47, 0xba, 0xfb,
	0x81, 0x3f, 0x53, 0xbb, 0x90, 0xde, 0x07, 0xfe, 0x2c, 0x5f, 0x8f, 0xd8, 0x7d, 0x6b, 0x79, 0x3d,
	0xc5, 0xbe, 0xa5, 0x85, 0xda, 0x78, 0x4b, 0x5a, 0xdc, 0xc4, 0x1e, 0xe6, 0xc4, 0x6a, 0x2f, 0x47,
	0x79, 0x2f, 0x25, 0xa3, 0x8a, 0x03, 0x5e, 0x4e, 0xa1, 0xa7, 0x50, 0x23, 0x61, 0xcc, 0xef, 0xad,
	0x8e, 0x34, 0xe8, 0x64, 0x06, 0x43, 0xc1, 0x14, 0x1b, 0x90, 0x52, 0xf4, 0x0c, 0xaa, 0xd3, 0x88,
	0x52, 0xab, 0x2b, 0xb5, 0x1e, 0x65, 0x5a, 0x87, 0x11, 0xa5, 0x43, 0xc6, 0xf1, 0x45, 0xe0, 0xb3,
	0xf9, 0xa8, 0xe2, 0x48, 0x25, 0xb4, 0x0f, 0xc0, 0x38, 0xe6, 0xc4, 0xf5, 0xe9, 0x65, 0x64, 0xf5,
	0xa4, 0xc9, 0x46, 0x7e, 0x4d, 0x84, 0x64, 0x4c, 0x2f, 0x45, 0x76, 0x4c, 0x96, 0x11, 0xe8, 0x35,
	0x74, 0x95, 0x0d, 0xa3, 0x38, 0x66, 0xf3, 0x88, 0x5b, 0xfd, 0xf2, 0xa1, 0xe7, 0x76, 0xa7, 0xa9,
	0xc2, 0xa8, 0xe2, 0x74, 0xa4, 0x49, 0xc6, 0x40, 0x13, 0xd8, 0x2c, 0xe2, 0xba, 0xf1, 0x4d, 0x10,
	0xc8, 0xfc, 0x6d, 0x48, 0x47, 0x5f, 0x2c, 0x39, 0x3a, 0xb9, 0x09, 0x82, 0x22, 0x91, 0x7d, 0xb6,
	0xc0, 0x47, 0x07, 0xa0, 0xfc, 0x0b, 0x27, 0x42, 0xc9, 0x42, 0xe5, 0x82, 0x72, 0x48, 0x18, 0x71,
	0x22, 0xdd, 0x15, 0x6e, 0xda, 0x4c, 0xa3, 0xd1, 0x20, 0xdb, 0x55, 0x92, 0x96, 0x9c, 0xb5, 0x29,
	0x7d, 0x7c, 0xbe, 0xd2, 0x47, 0x5e, 0x95, 0x1d, 0xa6, 0x33, 0x44, 0x6e, 0x02, 0x82, 0x3d, 0x55,
	0xbc, 0xb2, 0x44, 0xb7, 0xca, 0xb9, 0x79, 0x9b, 0x4b, 0x8b, 0x42, 0xed, 0x14, 0x26, 0xa2, 0x5c,
	0x5f, 0x42, 0x27, 0x26, 0x24, 0x71, 0x7d, 0x8f, 0x50, 0xee, 0xf3, 0x7b, 0xeb, 0x51, 0xf9, 0x1a,
	0x9e, 0x10, 0x92, 0x8c, 0x53, 0x99, 0xd8, 0x46, 0xac, 0xd1, 0xe2, 0xb2, 0xe3, 0xe9, 0x95, 0xf5,
	0x58, 0x9a, 0x3c, 0xc9, 0x6f, 0xee, 0xf4, 0x8a, 0x46, 0x3f, 0x06, 0xc4, 0x9b, 0x91, 0x90, 0x50,
	0xb1, 0x79, 0xa1, 0x85, 0xfe, 0x0a, 0x10, 0x27, 0xfe, 0xad, 0xca, 0x82, 0xf5, 0xa4, 0x9c, 0x7c,
	0xb5, 0xdf, 0x93, 0x5b, 0x5e, 0xae, 0x62, 0xcd, 0x02, 0xbd, 0xd2, 0xec, 0x99, 0x65, 0x49, 0xfb,
	0x5f, 0x3c, 0x60, 0x9f, 0x67, 0x4c, 0x33, 0x41, 0xaf, 0xa0, 0x9d, 0x52, 0xae, 0x28, 0x74, 0xeb,
	0xb3, 0xf2, 0xb1, 0x9d, 0x28, 0x59, 0xf9, 0x5a, 0xb7, 0xe2, 0x82, 0x8b, 0x86, 0xd0, 0xe3, 0x09,
	0xa6, 0x0c, 0x4f, 0xb9, 0x1f, 0x51, 0x99, 0xf0, 0xed, 0xb2, 0x8f, 0xb3, 0x42, 0x5c, 0xf8, 0xe8,
	0x6a, 0x46, 0x13, 0x36, 0xb3, 0x5d, 0x58, 0x3f, 0xc3, 0x33, 0xd4, 0x01, 0xf3, 0xfd, 0xf1, 0x60,
	0xf8, 0xc3, 0xf8, 0x78, 0x38, 0xe8, 0x57, 0x90, 0x09, 0xb5, 0xe1, 0xe4, 0xe4, 0xec, 0xbc, 0x6f,
	0xa0, 0x36, 0x34, 0xdf, 0x39, 0x47, 0xee, 0xbb, 0xe3, 0xb7, 0xe7, 0xfd, 0x35, 0xa1, 0x77, 0x38,
	0x3a, 0x38, 0x56, 0xe4, 0x3a, 0xea, 0x43, 0x5b, 0x92, 0x07, 0xc7, 0x03, 0xf7, 0x9d, 0x73, 0xd4,
	0xaf, 0xa2, 0x1e, 0xb4, 0x94, 0x82, 0x23, 0x19, 0x35, 0x1d, 0xd0, 0x7f, 0x32, 0xc0, 0xcc, 0x0b,
	0x1b, 0xed, 0x81, 0xc9, 0xfd, 0x90, 0x30, 0x8e, 0xc3, 0x58, 0x02, 0x77, 0x6b, 0xbf, 0xaf, 0x1f,
	0xf4, 0x99, 0x1f, 0x12, 0xa7, 0x50, 0x41, 0x8f, 0xa0, 0x1e, 0x5f, 0xf9, 0xae, 0xef, 0x49, 0x3c,
	0x6f, 0x3b, 0xb5, 0xf8, 0xca, 0x1f, 0x7b, 0xe8, 0x97, 0xd0, 0x4a, 0xe1, 0xde, 0x9d, 0x1c, 0x1c,
	0x5a, 0x55, 0x29, 0x83, 0x94, 0x35, 0x39, 0x38, 0x14, 0x17, 0x3d, 0x4e, 0xa2, 0x98, 0x24, 0xdc,
	0x27, 0x2c, 0x05, 0x76, 0x54, 0xe4, 0x39, 0x93, 0x38, 0x9a, 0x96, 0xfd, 0x1f, 0x03, 0xa0, 0x10,
	0xa1, 0x5d, 0xe8, 0x7b, 0xcc, 0x95, 0x45, 0x94, 0xb8, 0x73, 0xe2, 0xcf, 0xe6, 0x3c, 0x6d, 0x41,
	0x5d, 0x8f, 0xbd, 0x95, 0xec, 0x91, 0xe4, 0x0a, 0x4d, 0x7e, 0xb7, 0xa0, 0xb9, 0xa6, 0x34, 0xf9,
	0x5d, 0x49, 0xf3, 0x2b, 0x68, 0x07, 0xe4, 0x92, 0xbb, 0x59, 0xeb, 0x12, 0x9b, 0x6a, 0x3a, 0x2d,
	0xc1, 0x3b, 0x4c, 0xdb, 0xd7, 0xef, 0x01, 0xe4, 0x88, 0x30, 0x8d, 0x3c, 0xc2, 0xac, 0xea, 0xce,
	0xba, 0x0e, 0x51, 0x87, 0x99, 0xc4, 0xd1, 0x94, 0xec, 0x03, 0xd8, 0x58, 0xc2, 0x20, 0xf4, 0x1c,
	0x9a, 0x24, 0x90, 0xe5, 0xcf, 0x2c, 0x43, 0x7a, 0xc9, 0x13, 0x9d, 0x4f, 0x02, 0xb9, 0x86, 0xfd,
	0x27, 0xd8, 0x5a, 0x85, 0x3e, 0x8b, 0x89, 0x36, 0x16, 0x13, 0x6d, 0x5f, 0x42, 0xa7, 0x04, 0xb5,
	0xda, 0x89, 0x19, 0xfa, 0x89, 0x6d, 0x43, 0x33, 0xbf, 0xe0, 0xaa, 0x61, 0xe7, 0x34, 0xb2, 0xa1,
	0xc3, 0x03, 0xe6, 0x4e, 0x49, 0xc2, 0xdd, 0x39, 0x66, 0xf3, 0xf4, 0xac, 0x5b, 0x3c, 0x60, 0x87,
	0x24, 0xe1, 0x23, 0xcc, 0xe6, 0xf6, 0x7b, 0x68, 0xeb, 0x40, 0xf0, 0x50, 0x18, 0x04, 0x55, 0xe1,
	0x26, 0x0d, 0x21, 0xff, 0x8b, 0xd0, 0x21, 0xe1, 0x58, 0xde, 0x38, 0xe5, 0x39, 0xa7, 0xed, 0x10,
	0x5a, 0xda, 0x7d, 0x7f, 0x78, 0xd6, 0xf0, 0x64, 0x1f, 0x64, 0xd6, 0xda, 0xce, 0xfa, 0xae, 0xe9,
	0x64, 0x24, 0xda, 0x83, 0x66, 0xc8, 0x66, 0x2e, 0xbf, 0x4f, 0x87, 0xae, 0x6e, 0xd1, 0x0c, 0x45,
	0x16, 0x27, 0x6c, 0x76, 0x76, 0x1f, 0x13, 0xa7, 0x11, 0xaa, 0x3f, 0x76, 0x04, 0x2d, 0xad, 0x0b,
	0x3f, 0x10, 0x4e, 0x5f, 0xef, 0x5a, 0x79, 0xbd, 0x1f, 0x1d, 0xf0, 0x0e, 0xa0, 0x68, 0xb0, 0x0f,
	0xc4, 0xfb, 0x35, 0x54, 0xd3, 0x58, 0xab, 0xab, 0xa4, 0xfa, 0x49, 0x91, 0x03, 0x15, 0x59, 0x0d,
	0x10, 0x3f, 0x7b, 0x62, 0xbf, 0x57, 0xe7, 0x98, 0xcd, 0x8c, 0xbf, 0x29, 0x0f, 0xb0, 0xad, 0xfd,
	0x5e, 0x6e, 0xad, 0xd8, 0xf9, 0x44, 0x6b, 0xff, 0x00, 0x68, 0x19, 0x77, 0xd1, 0x8b, 0x45, 0x07,
	0x8f, 0x17, 0x40, 0x7a, 0xc9, 0xcf, 0x39, 0x34, 0x52, 0x1e, 0x7a, 0x02, 0x0d, 0x46, 0xae, 0x5d,
	0x7a, 0x13, 0xa6, 0xdb, 0xad, 0x33, 0x72, 0x7d, 0x7c, 0x13, 0x8a, 0xea, 0xd4, 0x4e, 0x55, 0xe5,
	0xf5, 0xab, 0x85, 0x9e, 0xb0, 0xbe, 0xb3, 0x2e, 0x6a, 0x5f, 0x43, 0x7d, 0xfb, 0xbf, 0x06, 0x74,
	0xcb, 0x61, 0xd1, 0x37, 0xd0, 0x9b, 0x46, 0x41, 0x40, 0x54, 0x1f, 0xa0, 0x38, 0x54, 0x99, 0x35,
	0x9d, 0x6e, 0xc1, 0x3e, 0xc6, 0x21, 0x11, 0x03, 0xbb, 0x90, 0xb2, 0x18, 0x4f, 0xd5, 0xc0, 0x6e,
	0x3a, 0x05, 0x03, 0x6d, 0x42, 0x8d, 0xdf, 0x65, 0xe8, 0x6a, 0x3a, 0x55, 0x7e, 0x37, 0xf6, 0xd0,
	0xaf, 0xa0, 0x93, 0xad, 0x28, 0xf9, 0x91, 0x11, 0x9e, 0xc2, 0x6b, 0xb6, 0x4c, 0x47, 0xf0, 0xd0,
	0x73, 0x40, 0x99, 0x12, 0xf3, 0xc3, 0x0c, 0xf5, 0x6a, 0x72, 0xbb, 0xfd, 0x54, 0x72, 0xea, 0x87,
	0x0a, 0xf7, 0xec, 0x7f, 0x19, 0xd0, 0xd6, 0xc7, 0x69, 0xb4, 0x07, 0x10, 0xe6, 0x53, 0x6f, 0x9a,
	0xe2, 0x6e, 0x79, 0x1e, 0x76, 0x34, 0x8d, 0x8f, 0xee, 0x1b, 0x3a, 0xdc, 0x54, 0xcb, 0x70, 0x63,
	0xff, 0xc3, 0x80, 0x8d, 0xa5, 0xb9, 0xe4, 0x21, 0x40, 0xf9, 0xd8, 0xc0, 0x4f, 0xa1, 0xeb, 0x33,
	0xd7, 0x23, 0xd3, 0x00, 0x27, 0x58, 0x9c, 0x42, 0x8a, 0xf1, 0x1d, 0x9f, 0x0d, 0x0a, 0xa6, 0xfd,
	0x67, 0x68, 0x66, 0xd6, 0xa2, 0x5c, 0x7c, 0x3a, 0xd5, 0xcb, 0xc5, 0xa7, 0x53, 0x51, 0x2e, 0x5a,
	0x1d, 0xad, 0xe9, 0x75, 0x64, 0x5f, 0xc2, 0xc6, 0xd2, 0x4b, 0x03, 0xbd, 0x84, 0x3e, 0x23, 0xc1,
	0xa5, 0x1c, 0x31, 0x93, 0x50, 0xc5, 0x36, 0xca, 0x0b, 0xce, 0xaf, 0x74, 0x4f, 0x68, 0x8e, 0x0b,
	0x45, 0x71, 0x3f, 0xc5, 0xc8, 0x44, 0xe5, 0x3d, 0x6c, 0x3b, 0x8a, 0xb0, 0x2f, 0x00, 0x2d, 0xbf,
	0x4d, 0xd0, 0xd7, 0x50, 0x93, 0x4f, 0xa1, 0x07, 0xdb, 0x8a, 0x12, 0x4b, 0x5c, 0x21, 0xd8, 0xfb,
	0x00, 0xae, 0x10, 0xec, 0xd9, 0x7f, 0x87, 0xba, 0x8a, 0x21, 0xce, 0x8c, 0x94, 0xde, 0x8a, 0x4e,
	0x4e, 0x7f, 0x10, 0x13, 0x57, 0xcf, 0x08, 0x76, 0x03, 0x6a, 0xf2, 0xa9, 0x60, 0xdf, 0x01, 0x5a,
	0x1e, 0x88, 0x45, 0xd3, 0x61, 0x1c, 0x27, 0xdc, 0x2d, 0x5f, 0xd5, 0x96, 0x64, 0x9e, 0xaa, 0xfb,
	0xfa, 0x25, 0xb4, 0x08, 0xf5, 0xdc, 0xf2, 0x21, 0x98, 0x84, 0x7a, 0x85, 0x5c, 0x1c, 0x36, 0x73,
	0x2f, 0x82, 0x68, 0x7a, 0x95, 0x9e, 0xb4, 0xe9, 0xb3, 0x01, 0x7b, 0x2d, 0x18, 0xf6, 0x05, 0x6c,
	0xae, 0x18, 0xa3, 0xd1, 0x33, 0x68, 0xa6, 0xa8, 0x91, 0xb5, 0xe6, 0x25, 0x78, 0xca, 0x15, 0x16,
	0x63, 0xac, 0x2d, 0xc6, 0x38, 0x82, 0xad, 0x55, 0xa3, 0x2b, 0xfa, 0xb6, 0xc0, 0x56, 0x15, 0x23,
	0x7f, 0x1a, 0xa5, 0x8a, 0x0a, 0x99, 0x73, 0xc8, 0xb5, 0xff, 0x6d, 0x40, 0xa7, 0x24, 0x2a, 0xd0,
	0xc1, 0xd0, 0xd0, 0xe1, 0xc3, 0x80, 0xf2, 0x25, 0x40, 0x01, 0x40, 0x29, 0xaa, 0x68, 0x1c, 0xf4,
	0x39, 0x98, 0x72, 0x1f, 0x22, 0xa7, 0xf2, 0x62, 0x56, 0x9d, 0xa6, 0x64, 0x9c, 0x92, 0x6b, 0xb4,
	0x03, 0x6d, 0x91, 0x6a, 0x9f, 0xa6, 0x7b, 0x55, 0x68, 0x02, 0x8c, 0x5c, 0x8f, 0xa9, 0xda, 0xec,
	0x1b, 0x78, 0xb4, 0x72, 0xce, 0x46, 0xfb, 0x4b, 0xd3, 0xce, 0xe3, 0x85, 0xed, 0x0e, 0x95, 0x58,
	0x9b, 0x79, 0xce, 0xa1, 0x5b, 0x96, 0xa1, 0xdf, 0x41, 0x5d, 0x65, 0x23, 0xbd, 0x38, 0x0f, 0xa4,
	0x2c, 0x55, 0xd2, 0x3f, 0x93, 0xa8, 0x6b, 0x93, 0x37, 0x83, 0xbf, 0xe5, 0xae, 0x33, 0xc0, 0x7e,
	0x0a, 0x3d, 0x7e, 0xe7, 0x96, 0xb6, 0xa7, 0x0a, 0xae, 0xcd, 0xef, 0x4e, 0xf3, 0x0d, 0x96, 0x5d,
	0xea, 0x5f, 0x5e, 0xec, 0x6f, 0xa0, 0xb7, 0xf0, 0xac, 0x11, 0x97, 0x96, 0x24, 0x49, 0x94, 0xa4,
	0xe7, 0xa3, 0x08, 0xfb, 0x3d, 0x98, 0xf9, 0x98, 0x28, 0x3a, 0x8e, 0xd6, 0x1c, 0xe4, 0x7f, 0x11,
	0xe3, 0x96, 0x24, 0x4c, 0x1c, 0x90, 0x3a, 0xbf, 0x8c, 0xfc, 0xe0, 0xa4, 0xf4, 0x06, 0xd0, 0xf2,
	0xdb, 0x42, 0xbc, 0xed, 0xb5, 0xb7, 0x45, 0x9a, 0xb6, 0xcd, 0x15, 0x8f, 0x11, 0x47, 0xd7, 0xfb,
	0xed, 0x5f, 0xa0, 0xa5, 0xb5, 0xf1, 0xc5, 0x87, 0x48, 0x07, 0xcc, 0xd7, 0x6f, 0xdf, 0x1d, 0xbe,
	0x71, 0x27, 0xa7, 0x47, 0x7d, 0x43, 0xbc, 0x37, 0xc6, 0x83, 0xe1, 0xf1, 0xd9, 0xf8, 0xec, 0x5c,
	0x72, 0xd6, 0xf6, 0x7f, 0x32, 0xa0, 0xae, 0xe6, 0x28, 0xf4, 0x3d, 0xb4, 0xd5, 0xbf, 0x53, 0x9e,
	0x10, 0x1c, 0xa2, 0x25, 0x98, 0xd9, 0x5e, 0xe2, 0xd8, 0x95, 0x5d, 0xe3, 0x85, 0x81, 0x5e, 0x42,
	0x4f, 0x59, 0x9e, 0x24, 0xfe, 0x47, 0x1b, 0x7f, 0x0d, 0xd5, 0x13, 0x9f, 0xce, 0x50, 0xf9, 0xab,
	0xc4, 0x76, 0x99, 0xb4, 0x2b, 0x17, 0xea, 0xc3, 0xdf, 0x77, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xb4, 0x7d, 0x2c, 0xfd, 0x10, 0x14, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: okchain.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ConsensusType int32

const (
	ConsensusType_DsBlockConsensus    ConsensusType = 0
	ConsensusType_MicroBlockConsensus ConsensusType = 1
	ConsensusType_FinalBlockConsensus ConsensusType = 2
	ConsensusType_ViewChangeConsensus ConsensusType = 3
)

var ConsensusType_name = map[int32]string{
	0: "DsBlockConsensus",
	1: "MicroBlockConsensus",
	2: "FinalBlockConsensus",
	3: "ViewChangeConsensus",
}
var ConsensusType_value = map[string]int32{
	"DsBlockConsensus":    0,
	"MicroBlockConsensus": 1,
	"FinalBlockConsensus": 2,
	"ViewChangeConsensus": 3,
}

func (x ConsensusType) String() string {
	return proto.EnumName(ConsensusType_name, int32(x))
}
func (ConsensusType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type Message_Type int32

const (
	Message_Peer_Hello                    Message_Type = 0
	Message_Peer_AddPeer                  Message_Type = 1
	Message_Peer_Register                 Message_Type = 2
	Message_DS_SetPrimary                 Message_Type = 100
	Message_DS_PoWSubmission              Message_Type = 101
	Message_DS_DSBlockConsensus           Message_Type = 102
	Message_DS_MicroblockSubmission       Message_Type = 103
	Message_DS_FinalBlockConsensus        Message_Type = 104
	Message_DS_ViewChangeConsensus        Message_Type = 105
	Message_Node_ProcessStartPoW          Message_Type = 200
	Message_Node_ProcessDSBlock           Message_Type = 201
	Message_Node_MircoBlockConsensus      Message_Type = 202
	Message_Node_ProcessFinalBlock        Message_Type = 203
	Message_Node_ViewChangeConsensus      Message_Type = 204
	Message_Node_ProcessCreateTransaction Message_Type = 205
	Message_Node_BroadcastTransactions    Message_Type = 206
	Message_Node_RevertState              Message_Type = 207
	Message_Node_NewAdd                   Message_Type = 208
	Message_Consensus_Announce            Message_Type = 301
	Message_Consensus_Commit              Message_Type = 302
	Message_Consensus_Challenge           Message_Type = 303
	Message_Consensus_Response            Message_Type = 304
	Message_Consensus_CollectiveSig       Message_Type = 305
	Message_Consensus_FinalCommit         Message_Type = 306
	Message_Consensus_FinalChallenge      Message_Type = 307
	Message_Consensus_FinalResponse       Message_Type = 308
	Message_Consensus_FinalCollectiveSig  Message_Type = 309
)

var Message_Type_name = map[int32]string{
	0:   "Peer_Hello",
	1:   "Peer_AddPeer",
	2:   "Peer_Register",
	100: "DS_SetPrimary",
	101: "DS_PoWSubmission",
	102: "DS_DSBlockConsensus",
	103: "DS_MicroblockSubmission",
	104: "DS_FinalBlockConsensus",
	105: "DS_ViewChangeConsensus",
	200: "Node_ProcessStartPoW",
	201: "Node_ProcessDSBlock",
	202: "Node_MircoBlockConsensus",
	203: "Node_ProcessFinalBlock",
	204: "Node_ViewChangeConsensus",
	205: "Node_ProcessCreateTransaction",
	206: "Node_BroadcastTransactions",
	207: "Node_RevertState",
	208: "Node_NewAdd",
	301: "Consensus_Announce",
	302: "Consensus_Commit",
	303: "Consensus_Challenge",
	304: "Consensus_Response",
	305: "Consensus_CollectiveSig",
	306: "Consensus_FinalCommit",
	307: "Consensus_FinalChallenge",
	308: "Consensus_FinalResponse",
	309: "Consensus_FinalCollectiveSig",
}
var Message_Type_value = map[string]int32{
	"Peer_Hello":                    0,
	"Peer_AddPeer":                  1,
	"Peer_Register":                 2,
	"DS_SetPrimary":                 100,
	"DS_PoWSubmission":              101,
	"DS_DSBlockConsensus":           102,
	"DS_MicroblockSubmission":       103,
	"DS_FinalBlockConsensus":        104,
	"DS_ViewChangeConsensus":        105,
	"Node_ProcessStartPoW":          200,
	"Node_ProcessDSBlock":           201,
	"Node_MircoBlockConsensus":      202,
	"Node_ProcessFinalBlock":        203,
	"Node_ViewChangeConsensus":      204,
	"Node_ProcessCreateTransaction": 205,
	"Node_BroadcastTransactions":    206,
	"Node_RevertState":              207,
	"Node_NewAdd":                   208,
	"Consensus_Announce":            301,
	"Consensus_Commit":              302,
	"Consensus_Challenge":           303,
	"Consensus_Response":            304,
	"Consensus_CollectiveSig":       305,
	"Consensus_FinalCommit":         306,
	"Consensus_FinalChallenge":      307,
	"Consensus_FinalResponse":       308,
	"Consensus_FinalCollectiveSig":  309,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type Message struct {
	Type      Message_Type  `protobuf:"varint,1,opt,name=type,enum=protos.Message_Type" json:"type,omitempty"`
	Timestamp *Timestamp    `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte        `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Peer      *PeerEndpoint `protobuf:"bytes,5,opt,name=peer" json:"peer,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_Peer_Hello
}

func (m *Message) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetPeer() *PeerEndpoint {
	if m != nil {
		return m.Peer
	}
	return nil
}

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PeerID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Timestamp struct {
	Second     uint64 `protobuf:"varint,1,opt,name=Second" json:"Second,omitempty"`
	Nanosecond uint64 `protobuf:"varint,2,opt,name=Nanosecond" json:"Nanosecond,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Timestamp) GetSecond() uint64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *Timestamp) GetNanosecond() uint64 {
	if m != nil {
		return m.Nanosecond
	}
	return 0
}

type PeerEndpoint struct {
	Id       *PeerID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Address  string  `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Port     uint32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Pubkey   []byte  `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Roleid   string  `protobuf:"bytes,5,opt,name=roleid" json:"roleid,omitempty"`
	Coinbase []byte  `protobuf:"bytes,6,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *PeerEndpoint) GetId() *PeerID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PeerEndpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerEndpoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeerEndpoint) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *PeerEndpoint) GetRoleid() string {
	if m != nil {
		return m.Roleid
	}
	return ""
}

func (m *PeerEndpoint) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

type StartPoW struct {
	BlockNum   uint64        `protobuf:"varint,1,opt,name=blockNum" json:"blockNum,omitempty"`
	Difficulty uint64        `protobuf:"varint,2,opt,name=difficulty" json:"difficulty,omitempty"`
	Rand1      string        `protobuf:"bytes,3,opt,name=rand1" json:"rand1,omitempty"`
	Rand2      string        `protobuf:"bytes,4,opt,name=rand2" json:"rand2,omitempty"`
	Peer       *PeerEndpoint `protobuf:"bytes,5,opt,name=peer" json:"peer,omitempty"`
}

func (m *StartPoW) Reset()                    { *m = StartPoW{} }
func (m *StartPoW) String() string            { return proto.CompactTextString(m) }
func (*StartPoW) ProtoMessage()               {}
func (*StartPoW) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *StartPoW) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *StartPoW) GetDifficulty() uint64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *StartPoW) GetRand1() string {
	if m != nil {
		return m.Rand1
	}
	return ""
}

func (m *StartPoW) GetRand2() string {
	if m != nil {
		return m.Rand2
	}
	return ""
}

func (m *StartPoW) GetPeer() *PeerEndpoint {
	if m != nil {
		return m.Peer
	}
	return nil
}

type PoWSubmission struct {
	BlockNum   uint64        `protobuf:"varint,1,opt,name=blockNum" json:"blockNum,omitempty"`
	Nonce      uint64        `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Difficulty uint64        `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	Rand1      string        `protobuf:"bytes,4,opt,name=rand1" json:"rand1,omitempty"`
	Rand2      string        `protobuf:"bytes,5,opt,name=rand2" json:"rand2,omitempty"`
	Peer       *PeerEndpoint `protobuf:"bytes,6,opt,name=peer" json:"peer,omitempty"`
	PublicKey  []byte        `protobuf:"bytes,7,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Coinbase   []byte        `protobuf:"bytes,8,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Result     *MiningResult `protobuf:"bytes,9,opt,name=result" json:"result,omitempty"`
}

func (m *PoWSubmission) Reset()                    { *m = PoWSubmission{} }
func (m *PoWSubmission) String() string            { return proto.CompactTextString(m) }
func (*PoWSubmission) ProtoMessage()               {}
func (*PoWSubmission) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *PoWSubmission) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *PoWSubmission) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *PoWSubmission) GetDifficulty() uint64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *PoWSubmission) GetRand1() string {
	if m != nil {
		return m.Rand1
	}
	return ""
}

func (m *PoWSubmission) GetRand2() string {
	if m != nil {
		return m.Rand2
	}
	return ""
}

func (m *PoWSubmission) GetPeer() *PeerEndpoint {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PoWSubmission) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PoWSubmission) GetCoinbase() []byte {
	if m != nil {
		return m.Coinbase
	}
	return nil
}

func (m *PoWSubmission) GetResult() *MiningResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type MiningResult struct {
	Nonce     uint64 `protobuf:"varint,1,opt,name=Nonce" json:"Nonce,omitempty"`
	MixHash   []byte `protobuf:"bytes,2,opt,name=MixHash,proto3" json:"MixHash,omitempty"`
	PowResult []byte `protobuf:"bytes,3,opt,name=PowResult,proto3" json:"PowResult,omitempty"`
	Proof     []byte `protobuf:"bytes,4,opt,name=Proof,proto3" json:"Proof,omitempty"`
	Vrfvalue  []byte `protobuf:"bytes,5,opt,name=Vrfvalue,proto3" json:"Vrfvalue,omitempty"`
}

func (m *MiningResult) Reset()                    { *m = MiningResult{} }
func (m *MiningResult) String() string            { return proto.CompactTextString(m) }
func (*MiningResult) ProtoMessage()               {}
func (*MiningResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *MiningResult) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MiningResult) GetMixHash() []byte {
	if m != nil {
		return m.MixHash
	}
	return nil
}

func (m *MiningResult) GetPowResult() []byte {
	if m != nil {
		return m.PowResult
	}
	return nil
}

func (m *MiningResult) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MiningResult) GetVrfvalue() []byte {
	if m != nil {
		return m.Vrfvalue
	}
	return nil
}

type ConsensusPayload struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ConsensusPayload) Reset()                    { *m = ConsensusPayload{} }
func (m *ConsensusPayload) String() string            { return proto.CompactTextString(m) }
func (*ConsensusPayload) ProtoMessage()               {}
func (*ConsensusPayload) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *ConsensusPayload) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *ConsensusPayload) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Announce struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Announce) Reset()                    { *m = Announce{} }
func (m *Announce) String() string            { return proto.CompactTextString(m) }
func (*Announce) ProtoMessage()               {}
func (*Announce) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Announce) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *Announce) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Commit struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Commit) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *Commit) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Challenge struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *Challenge) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *Challenge) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Response struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *Response) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *Response) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CollectiveSig struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *CollectiveSig) Reset()                    { *m = CollectiveSig{} }
func (m *CollectiveSig) String() string            { return proto.CompactTextString(m) }
func (*CollectiveSig) ProtoMessage()               {}
func (*CollectiveSig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *CollectiveSig) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *CollectiveSig) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type FinalCommit struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FinalCommit) Reset()                    { *m = FinalCommit{} }
func (m *FinalCommit) String() string            { return proto.CompactTextString(m) }
func (*FinalCommit) ProtoMessage()               {}
func (*FinalCommit) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *FinalCommit) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *FinalCommit) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type FinalChallenge struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FinalChallenge) Reset()                    { *m = FinalChallenge{} }
func (m *FinalChallenge) String() string            { return proto.CompactTextString(m) }
func (*FinalChallenge) ProtoMessage()               {}
func (*FinalChallenge) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *FinalChallenge) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *FinalChallenge) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type FinalResponse struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FinalResponse) Reset()                    { *m = FinalResponse{} }
func (m *FinalResponse) String() string            { return proto.CompactTextString(m) }
func (*FinalResponse) ProtoMessage()               {}
func (*FinalResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *FinalResponse) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *FinalResponse) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type FinalCollectiveSig struct {
	Type ConsensusType `protobuf:"varint,1,opt,name=type,enum=protos.ConsensusType" json:"type,omitempty"`
	Msg  []byte        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FinalCollectiveSig) Reset()                    { *m = FinalCollectiveSig{} }
func (m *FinalCollectiveSig) String() string            { return proto.CompactTextString(m) }
func (*FinalCollectiveSig) ProtoMessage()               {}
func (*FinalCollectiveSig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *FinalCollectiveSig) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_DsBlockConsensus
}

func (m *FinalCollectiveSig) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type VCBlockHeader struct {
	Timestamp      *Timestamp    `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ViewChangeDSNo uint64        `protobuf:"varint,2,opt,name=viewChangeDSNo" json:"viewChangeDSNo,omitempty"`
	ViewChangeTXNo uint64        `protobuf:"varint,3,opt,name=viewChangeTXNo" json:"viewChangeTXNo,omitempty"`
	NewLeader      *PeerEndpoint `protobuf:"bytes,4,opt,name=newLeader" json:"newLeader,omitempty"`
	Stage          string        `protobuf:"bytes,5,opt,name=stage" json:"stage,omitempty"`
	BoolMap        []bool        `protobuf:"varint,6,rep,packed,name=boolMap" json:"boolMap,omitempty"`
	Signature      []byte        `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiPubKey    []byte        `protobuf:"bytes,8,opt,name=multiPubKey,proto3" json:"multiPubKey,omitempty"`
}

func (m *VCBlockHeader) Reset()                    { *m = VCBlockHeader{} }
func (m *VCBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*VCBlockHeader) ProtoMessage()               {}
func (*VCBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *VCBlockHeader) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *VCBlockHeader) GetViewChangeDSNo() uint64 {
	if m != nil {
		return m.ViewChangeDSNo
	}
	return 0
}

func (m *VCBlockHeader) GetViewChangeTXNo() uint64 {
	if m != nil {
		return m.ViewChangeTXNo
	}
	return 0
}

func (m *VCBlockHeader) GetNewLeader() *PeerEndpoint {
	if m != nil {
		return m.NewLeader
	}
	return nil
}

func (m *VCBlockHeader) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *VCBlockHeader) GetBoolMap() []bool {
	if m != nil {
		return m.BoolMap
	}
	return nil
}

func (m *VCBlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VCBlockHeader) GetMultiPubKey() []byte {
	if m != nil {
		return m.MultiPubKey
	}
	return nil
}

type VCBlock struct {
	Header *VCBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *VCBlock) Reset()                    { *m = VCBlock{} }
func (m *VCBlock) String() string            { return proto.CompactTextString(m) }
func (*VCBlock) ProtoMessage()               {}
func (*VCBlock) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *VCBlock) GetHeader() *VCBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type MicroBlock struct {
	Header               *TxBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ShardID              uint32         `protobuf:"varint,2,opt,name=shardID" json:"shardID,omitempty"`
	Miner                *PeerEndpoint  `protobuf:"bytes,3,opt,name=miner" json:"miner,omitempty"`
	ShardingLeadCoinBase []byte         `protobuf:"bytes,4,opt,name=shardingLeadCoinBase,proto3" json:"shardingLeadCoinBase,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,5,rep,name=Transactions" json:"Transactions,omitempty"`
}

func (m *MicroBlock) Reset()                    { *m = MicroBlock{} }
func (m *MicroBlock) String() string            { return proto.CompactTextString(m) }
func (*MicroBlock) ProtoMessage()               {}
func (*MicroBlock) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *MicroBlock) GetHeader() *TxBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MicroBlock) GetShardID() uint32 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *MicroBlock) GetMiner() *PeerEndpoint {
	if m != nil {
		return m.Miner
	}
	return nil
}

func (m *MicroBlock) GetShardingLeadCoinBase() []byte {
	if m != nil {
		return m.ShardingLeadCoinBase
	}
	return nil
}

func (m *MicroBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type StakeWeight struct {
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Weight    uint64     `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *StakeWeight) Reset()                    { *m = StakeWeight{} }
func (m *StakeWeight) String() string            { return proto.CompactTextString(m) }
func (*StakeWeight) ProtoMessage()               {}
func (*StakeWeight) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{20} }

func (m *StakeWeight) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *StakeWeight) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type Account struct {
	Nonce       uint64 `protobuf:"varint,1,opt,name=Nonce" json:"Nonce,omitempty"`
	Balance     uint64 `protobuf:"varint,2,opt,name=Balance" json:"Balance,omitempty"`
	Root        []byte `protobuf:"bytes,3,opt,name=Root,proto3" json:"Root,omitempty"`
	CodeHash    []byte `protobuf:"bytes,4,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	StakeWeight uint64 `protobuf:"varint,5,opt,name=stakeWeight" json:"stakeWeight,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{21} }

func (m *Account) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Account) GetCodeHash() []byte {
	if m != nil {
		return m.CodeHash
	}
	return nil
}

func (m *Account) GetStakeWeight() uint64 {
	if m != nil {
		return m.StakeWeight
	}
	return 0
}

type Transaction struct {
	Version      uint32     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Nonce        uint64     `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	SenderPubKey []byte     `protobuf:"bytes,3,opt,name=senderPubKey,proto3" json:"senderPubKey,omitempty"`
	ToAddr       []byte     `protobuf:"bytes,4,opt,name=toAddr,proto3" json:"toAddr,omitempty"`
	Amount       uint64     `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	Signature    []byte     `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	GasPrice     uint64     `protobuf:"varint,7,opt,name=gasPrice" json:"gasPrice,omitempty"`
	GasLimit     uint64     `protobuf:"varint,8,opt,name=gasLimit" json:"gasLimit,omitempty"`
	Code         []byte     `protobuf:"bytes,9,opt,name=code,proto3" json:"code,omitempty"`
	Data         []byte     `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp    *Timestamp `protobuf:"bytes,11,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{22} }

func (m *Transaction) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetSenderPubKey() []byte {
	if m != nil {
		return m.SenderPubKey
	}
	return nil
}

func (m *Transaction) GetToAddr() []byte {
	if m != nil {
		return m.ToAddr
	}
	return nil
}

func (m *Transaction) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *Transaction) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *Transaction) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type DSBlock struct {
	Header *DSBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body   *DSBlockBody   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *DSBlock) Reset()                    { *m = DSBlock{} }
func (m *DSBlock) String() string            { return proto.CompactTextString(m) }
func (*DSBlock) ProtoMessage()               {}
func (*DSBlock) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{23} }

func (m *DSBlock) GetHeader() *DSBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DSBlock) GetBody() *DSBlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type DSBlockHeader struct {
	Version           uint32        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp         *Timestamp    `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	PreviousBlockHash []byte        `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	ShardingSum       uint32        `protobuf:"varint,4,opt,name=shardingSum" json:"shardingSum,omitempty"`
	WinnerPubKey      []byte        `protobuf:"bytes,5,opt,name=winnerPubKey,proto3" json:"winnerPubKey,omitempty"`
	WinnerNonce       uint64        `protobuf:"varint,6,opt,name=winnerNonce" json:"winnerNonce,omitempty"`
	BlockNumber       uint64        `protobuf:"varint,7,opt,name=blockNumber" json:"blockNumber,omitempty"`
	PowDifficulty     uint64        `protobuf:"varint,8,opt,name=powDifficulty" json:"powDifficulty,omitempty"`
	PowSubmissionNum  uint64        `protobuf:"varint,9,opt,name=powSubmissionNum" json:"powSubmissionNum,omitempty"`
	NewLeader         *PeerEndpoint `protobuf:"bytes,10,opt,name=newLeader" json:"newLeader,omitempty"`
	Miner             *PeerEndpoint `protobuf:"bytes,11,opt,name=miner" json:"miner,omitempty"`
	BoolMap           []bool        `protobuf:"varint,12,rep,packed,name=boolMap" json:"boolMap,omitempty"`
	Signature         []byte        `protobuf:"bytes,13,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiPubKey       []byte        `protobuf:"bytes,14,opt,name=multiPubKey,proto3" json:"multiPubKey,omitempty"`
}

func (m *DSBlockHeader) Reset()                    { *m = DSBlockHeader{} }
func (m *DSBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*DSBlockHeader) ProtoMessage()               {}
func (*DSBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{24} }

func (m *DSBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DSBlockHeader) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DSBlockHeader) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *DSBlockHeader) GetShardingSum() uint32 {
	if m != nil {
		return m.ShardingSum
	}
	return 0
}

func (m *DSBlockHeader) GetWinnerPubKey() []byte {
	if m != nil {
		return m.WinnerPubKey
	}
	return nil
}

func (m *DSBlockHeader) GetWinnerNonce() uint64 {
	if m != nil {
		return m.WinnerNonce
	}
	return 0
}

func (m *DSBlockHeader) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *DSBlockHeader) GetPowDifficulty() uint64 {
	if m != nil {
		return m.PowDifficulty
	}
	return 0
}

func (m *DSBlockHeader) GetPowSubmissionNum() uint64 {
	if m != nil {
		return m.PowSubmissionNum
	}
	return 0
}

func (m *DSBlockHeader) GetNewLeader() *PeerEndpoint {
	if m != nil {
		return m.NewLeader
	}
	return nil
}

func (m *DSBlockHeader) GetMiner() *PeerEndpoint {
	if m != nil {
		return m.Miner
	}
	return nil
}

func (m *DSBlockHeader) GetBoolMap() []bool {
	if m != nil {
		return m.BoolMap
	}
	return nil
}

func (m *DSBlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DSBlockHeader) GetMultiPubKey() []byte {
	if m != nil {
		return m.MultiPubKey
	}
	return nil
}

type DSBlockBody struct {
	ShardingNodes    []*PeerEndpoint `protobuf:"bytes,1,rep,name=shardingNodes" json:"shardingNodes,omitempty"`
	Committee        []*PeerEndpoint `protobuf:"bytes,2,rep,name=committee" json:"committee,omitempty"`
	CurrentBlockHash []byte          `protobuf:"bytes,3,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
}

func (m *DSBlockBody) Reset()                    { *m = DSBlockBody{} }
func (m *DSBlockBody) String() string            { return proto.CompactTextString(m) }
func (*DSBlockBody) ProtoMessage()               {}
func (*DSBlockBody) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{25} }

func (m *DSBlockBody) GetShardingNodes() []*PeerEndpoint {
	if m != nil {
		return m.ShardingNodes
	}
	return nil
}

func (m *DSBlockBody) GetCommittee() []*PeerEndpoint {
	if m != nil {
		return m.Committee
	}
	return nil
}

func (m *DSBlockBody) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

type TxBlock struct {
	Header *TxBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body   *TxBlockBody   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *TxBlock) Reset()                    { *m = TxBlock{} }
func (m *TxBlock) String() string            { return proto.CompactTextString(m) }
func (*TxBlock) ProtoMessage()               {}
func (*TxBlock) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{26} }

func (m *TxBlock) GetHeader() *TxBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TxBlock) GetBody() *TxBlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type TxBlockHeader struct {
	Version              uint32        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp            *Timestamp    `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	PreviousBlockHash    []byte        `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	BlockNumber          uint64        `protobuf:"varint,4,opt,name=blockNumber" json:"blockNumber,omitempty"`
	DSCoinBase           [][]byte      `protobuf:"bytes,5,rep,name=dSCoinBase,proto3" json:"dSCoinBase,omitempty"`
	ShardingLeadCoinBase [][]byte      `protobuf:"bytes,6,rep,name=shardingLeadCoinBase,proto3" json:"shardingLeadCoinBase,omitempty"`
	StateRoot            []byte        `protobuf:"bytes,7,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	TxRoot               []byte        `protobuf:"bytes,8,opt,name=txRoot,proto3" json:"txRoot,omitempty"`
	GasLimit             uint64        `protobuf:"varint,9,opt,name=gasLimit" json:"gasLimit,omitempty"`
	GasUsed              uint64        `protobuf:"varint,10,opt,name=gasUsed" json:"gasUsed,omitempty"`
	DSBlockNum           uint64        `protobuf:"varint,11,opt,name=dSBlockNum" json:"dSBlockNum,omitempty"`
	DSBlockHash          []byte        `protobuf:"bytes,12,opt,name=dSBlockHash,proto3" json:"dSBlockHash,omitempty"`
	Miner                *PeerEndpoint `protobuf:"bytes,13,opt,name=miner" json:"miner,omitempty"`
	TxNum                uint64        `protobuf:"varint,14,opt,name=txNum" json:"txNum,omitempty"`
	BoolMap              []bool        `protobuf:"varint,15,rep,packed,name=boolMap" json:"boolMap,omitempty"`
	Signature            []byte        `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiPubKey          []byte        `protobuf:"bytes,17,opt,name=multiPubKey,proto3" json:"multiPubKey,omitempty"`
}

func (m *TxBlockHeader) Reset()                    { *m = TxBlockHeader{} }
func (m *TxBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*TxBlockHeader) ProtoMessage()               {}
func (*TxBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{27} }

func (m *TxBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TxBlockHeader) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TxBlockHeader) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *TxBlockHeader) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TxBlockHeader) GetDSCoinBase() [][]byte {
	if m != nil {
		return m.DSCoinBase
	}
	return nil
}

func (m *TxBlockHeader) GetShardingLeadCoinBase() [][]byte {
	if m != nil {
		return m.ShardingLeadCoinBase
	}
	return nil
}

func (m *TxBlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *TxBlockHeader) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *TxBlockHeader) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TxBlockHeader) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *TxBlockHeader) GetDSBlockNum() uint64 {
	if m != nil {
		return m.DSBlockNum
	}
	return 0
}

func (m *TxBlockHeader) GetDSBlockHash() []byte {
	if m != nil {
		return m.DSBlockHash
	}
	return nil
}

func (m *TxBlockHeader) GetMiner() *PeerEndpoint {
	if m != nil {
		return m.Miner
	}
	return nil
}

func (m *TxBlockHeader) GetTxNum() uint64 {
	if m != nil {
		return m.TxNum
	}
	return 0
}

func (m *TxBlockHeader) GetBoolMap() []bool {
	if m != nil {
		return m.BoolMap
	}
	return nil
}

func (m *TxBlockHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TxBlockHeader) GetMultiPubKey() []byte {
	if m != nil {
		return m.MultiPubKey
	}
	return nil
}

type TxBlockBody struct {
	NumberOfMicroBlock uint32         `protobuf:"varint,1,opt,name=numberOfMicroBlock" json:"numberOfMicroBlock,omitempty"`
	MicroBlockHashes   [][]byte       `protobuf:"bytes,2,rep,name=microBlockHashes,proto3" json:"microBlockHashes,omitempty"`
	Transactions       []*Transaction `protobuf:"bytes,3,rep,name=Transactions" json:"Transactions,omitempty"`
	CurrentBlockHash   []byte         `protobuf:"bytes,4,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
}

func (m *TxBlockBody) Reset()                    { *m = TxBlockBody{} }
func (m *TxBlockBody) String() string            { return proto.CompactTextString(m) }
func (*TxBlockBody) ProtoMessage()               {}
func (*TxBlockBody) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{28} }

func (m *TxBlockBody) GetNumberOfMicroBlock() uint32 {
	if m != nil {
		return m.NumberOfMicroBlock
	}
	return 0
}

func (m *TxBlockBody) GetMicroBlockHashes() [][]byte {
	if m != nil {
		return m.MicroBlockHashes
	}
	return nil
}

func (m *TxBlockBody) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *TxBlockBody) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

type ConfigRpcResponse struct {
	Code uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *ConfigRpcResponse) Reset()                    { *m = ConfigRpcResponse{} }
func (m *ConfigRpcResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigRpcResponse) ProtoMessage()               {}
func (*ConfigRpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{29} }

func (m *ConfigRpcResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type InformDs struct {
	Leader *PeerEndpoint   `protobuf:"bytes,1,opt,name=Leader" json:"Leader,omitempty"`
	DsSize int32           `protobuf:"varint,2,opt,name=DsSize" json:"DsSize,omitempty"`
	DsList []*PeerEndpoint `protobuf:"bytes,3,rep,name=DsList" json:"DsList,omitempty"`
}

func (m *InformDs) Reset()                    { *m = InformDs{} }
func (m *InformDs) String() string            { return proto.CompactTextString(m) }
func (*InformDs) ProtoMessage()               {}
func (*InformDs) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{30} }

func (m *InformDs) GetLeader() *PeerEndpoint {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *InformDs) GetDsSize() int32 {
	if m != nil {
		return m.DsSize
	}
	return 0
}

func (m *InformDs) GetDsList() []*PeerEndpoint {
	if m != nil {
		return m.DsList
	}
	return nil
}

type InformSharding struct {
	Pow          *StartPoW       `protobuf:"bytes,1,opt,name=Pow" json:"Pow,omitempty"`
	ShardingSize int32           `protobuf:"varint,2,opt,name=ShardingSize" json:"ShardingSize,omitempty"`
	DsList       []*PeerEndpoint `protobuf:"bytes,3,rep,name=DsList" json:"DsList,omitempty"`
	ShardingList []*PeerEndpoint `protobuf:"bytes,4,rep,name=ShardingList" json:"ShardingList,omitempty"`
}

func (m *InformSharding) Reset()                    { *m = InformSharding{} }
func (m *InformSharding) String() string            { return proto.CompactTextString(m) }
func (*InformSharding) ProtoMessage()               {}
func (*InformSharding) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{31} }

func (m *InformSharding) GetPow() *StartPoW {
	if m != nil {
		return m.Pow
	}
	return nil
}

func (m *InformSharding) GetShardingSize() int32 {
	if m != nil {
		return m.ShardingSize
	}
	return 0
}

func (m *InformSharding) GetDsList() []*PeerEndpoint {
	if m != nil {
		return m.DsList
	}
	return nil
}

func (m *InformSharding) GetShardingList() []*PeerEndpoint {
	if m != nil {
		return m.ShardingList
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*Timestamp)(nil), "protos.Timestamp")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
	proto.RegisterType((*StartPoW)(nil), "protos.StartPoW")
	proto.RegisterType((*PoWSubmission)(nil), "protos.PoWSubmission")
	proto.RegisterType((*MiningResult)(nil), "protos.MiningResult")
	proto.RegisterType((*ConsensusPayload)(nil), "protos.ConsensusPayload")
	proto.RegisterType((*Announce)(nil), "protos.Announce")
	proto.RegisterType((*Commit)(nil), "protos.Commit")
	proto.RegisterType((*Challenge)(nil), "protos.Challenge")
	proto.RegisterType((*Response)(nil), "protos.Response")
	proto.RegisterType((*CollectiveSig)(nil), "protos.CollectiveSig")
	proto.RegisterType((*FinalCommit)(nil), "protos.FinalCommit")
	proto.RegisterType((*FinalChallenge)(nil), "protos.FinalChallenge")
	proto.RegisterType((*FinalResponse)(nil), "protos.FinalResponse")
	proto.RegisterType((*FinalCollectiveSig)(nil), "protos.FinalCollectiveSig")
	proto.RegisterType((*VCBlockHeader)(nil), "protos.VCBlockHeader")
	proto.RegisterType((*VCBlock)(nil), "protos.VCBlock")
	proto.RegisterType((*MicroBlock)(nil), "protos.MicroBlock")
	proto.RegisterType((*StakeWeight)(nil), "protos.StakeWeight")
	proto.RegisterType((*Account)(nil), "protos.Account")
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*DSBlock)(nil), "protos.DSBlock")
	proto.RegisterType((*DSBlockHeader)(nil), "protos.DSBlockHeader")
	proto.RegisterType((*DSBlockBody)(nil), "protos.DSBlockBody")
	proto.RegisterType((*TxBlock)(nil), "protos.TxBlock")
	proto.RegisterType((*TxBlockHeader)(nil), "protos.TxBlockHeader")
	proto.RegisterType((*TxBlockBody)(nil), "protos.TxBlockBody")
	proto.RegisterType((*ConfigRpcResponse)(nil), "protos.ConfigRpcResponse")
	proto.RegisterType((*InformDs)(nil), "protos.InformDs")
	proto.RegisterType((*InformSharding)(nil), "protos.InformSharding")
	proto.RegisterEnum("protos.ConsensusType", ConsensusType_name, ConsensusType_value)
	proto.RegisterEnum("protos.Message_Type", Message_Type_name, Message_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/protos.Peer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerChatClient{stream}
	return x, nil
}

type Peer_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type peerChatClient struct {
	grpc.ClientStream
}

func (x *peerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Peer service

type PeerServer interface {
	Chat(Peer_ChatServer) error
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).Chat(&peerChatServer{stream})
}

type Peer_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type peerChatServer struct {
	grpc.ServerStream
}

func (x *peerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Peer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "okchain.proto",
}

func init() { proto.RegisterFile("okchain.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4b, 0x73, 0x23, 0x49,
	0x11, 0x9e, 0x96, 0xdb, 0x92, 0x95, 0x92, 0xbc, 0xed, 0xb2, 0x67, 0x2c, 0xbc, 0xb3, 0x8b, 0xe9,
	0x20, 0x58, 0x33, 0xb1, 0x18, 0x10, 0x11, 0xb0, 0xc1, 0xcd, 0x96, 0x16, 0x66, 0xc0, 0xf6, 0x8a,
	0x6e, 0x33, 0xc3, 0xcd, 0x51, 0xea, 0x2e, 0x4b, 0x15, 0x23, 0x75, 0x29, 0xba, 0x4a, 0x96, 0xc5,
	0x81, 0x3f, 0x40, 0x04, 0x47, 0x4e, 0x04, 0x5c, 0xe1, 0xc0, 0x7b, 0xb9, 0xef, 0x71, 0x79, 0xec,
	0xc2, 0x2f, 0xe1, 0x37, 0x10, 0xf5, 0xe8, 0x97, 0x1e, 0xf6, 0x38, 0x74, 0xe0, 0x24, 0xe5, 0xa3,
	0xb2, 0xb2, 0xb2, 0x32, 0xbf, 0xcc, 0x6a, 0x68, 0xb0, 0xd7, 0xc1, 0x00, 0xd3, 0xe8, 0x78, 0x1c,
	0x33, 0xc1, 0x50, 0x59, 0xfd, 0x70, 0xf7, 0x97, 0x15, 0xa8, 0x9c, 0x13, 0xce, 0x71, 0x9f, 0xa0,
	0x23, 0xb0, 0xc5, 0x6c, 0x4c, 0x9a, 0xd6, 0xa1, 0x75, 0xb4, 0xdd, 0xda, 0xd3, 0x9a, 0xfc, 0xd8,
	0x88, 0x8f, 0x2f, 0x67, 0x63, 0xe2, 0x29, 0x0d, 0xf4, 0x75, 0xa8, 0x0a, 0x3a, 0x22, 0x5c, 0xe0,
	0xd1, 0xb8, 0x59, 0x3a, 0xb4, 0x8e, 0x6a, 0xad, 0x9d, 0x44, 0xfd, 0x32, 0x11, 0x78, 0x99, 0x0e,
	0x6a, 0x42, 0x65, 0x8c, 0x67, 0x43, 0x86, 0xc3, 0xe6, 0xc6, 0xa1, 0x75, 0x54, 0xf7, 0x12, 0x12,
	0x3d, 0x85, 0x2a, 0xa7, 0xfd, 0x08, 0x8b, 0x49, 0x4c, 0x9a, 0xb6, 0x92, 0x65, 0x0c, 0xe9, 0xd2,
	0x98, 0x90, 0xb8, 0xb9, 0xa9, 0xf6, 0x48, 0x5d, 0xea, 0x12, 0x12, 0x7f, 0x18, 0x85, 0x63, 0x46,
	0x23, 0xe1, 0x29, 0x0d, 0xf7, 0xb3, 0x4d, 0xb0, 0xa5, 0x87, 0x68, 0x1b, 0x40, 0x8a, 0xaf, 0x9e,
	0x93, 0xe1, 0x90, 0x39, 0x8f, 0x90, 0x03, 0x75, 0x45, 0x9f, 0x84, 0xa1, 0xfc, 0x75, 0x2c, 0xb4,
	0x03, 0x0d, 0xc5, 0xf1, 0x48, 0x9f, 0x72, 0x41, 0x62, 0xa7, 0x24, 0x59, 0x1d, 0xff, 0xca, 0x27,
	0xa2, 0x1b, 0xd3, 0x11, 0x8e, 0x67, 0x4e, 0x88, 0xf6, 0xc0, 0xe9, 0xf8, 0x57, 0x5d, 0xf6, 0xca,
	0x9f, 0xf4, 0x46, 0x94, 0x73, 0xca, 0x22, 0x87, 0xa0, 0x7d, 0xd8, 0xed, 0xf8, 0x57, 0x1d, 0xff,
	0x74, 0xc8, 0x82, 0xd7, 0x6d, 0x16, 0x71, 0x12, 0xf1, 0x09, 0x77, 0xae, 0xd1, 0xdb, 0xb0, 0xdf,
	0xf1, 0xaf, 0xce, 0x69, 0x10, 0xb3, 0x9e, 0x94, 0xe5, 0x56, 0xf5, 0xd1, 0x01, 0x3c, 0xe9, 0xf8,
	0x57, 0xdf, 0xa3, 0x11, 0x1e, 0xce, 0x2d, 0x1c, 0x18, 0xd9, 0x4b, 0x4a, 0xa6, 0xed, 0x01, 0x8e,
	0xfa, 0x24, 0x93, 0x51, 0xf4, 0x05, 0xd8, 0xbb, 0x60, 0x21, 0xb9, 0xea, 0xc6, 0x2c, 0x20, 0x9c,
	0xfb, 0x02, 0xc7, 0xa2, 0xcb, 0x5e, 0x39, 0x9f, 0x5a, 0xa8, 0x09, 0xbb, 0x79, 0x91, 0xf1, 0xc8,
	0xf9, 0xbb, 0x85, 0xde, 0x81, 0xa6, 0x92, 0x9c, 0xd3, 0x38, 0x60, 0x73, 0xdb, 0xfd, 0xc3, 0x42,
	0x6f, 0xc3, 0x93, 0xfc, 0xc2, 0xcc, 0x29, 0xe7, 0x9f, 0xd9, 0xda, 0x65, 0xee, 0xfc, 0xcb, 0x42,
	0x2e, 0xbc, 0x93, 0x5f, 0xdb, 0x8e, 0x09, 0x16, 0xe4, 0x32, 0xc6, 0x11, 0xc7, 0x81, 0x90, 0x47,
	0xfd, 0xcc, 0x42, 0x5f, 0x84, 0x03, 0xa5, 0x73, 0x1a, 0x33, 0x1c, 0x06, 0x98, 0x8b, 0x9c, 0x9c,
	0x3b, 0x9f, 0x5b, 0xe8, 0x31, 0x38, 0x4a, 0xc1, 0x23, 0x37, 0x24, 0x16, 0xbe, 0xc0, 0x82, 0x38,
	0xff, 0xb6, 0x90, 0x03, 0x35, 0xc5, 0xbe, 0x20, 0xd3, 0x93, 0x30, 0x74, 0xfe, 0x63, 0xa1, 0x7d,
	0x40, 0xe9, 0xee, 0x57, 0x27, 0x51, 0xc4, 0x26, 0x51, 0x40, 0x9c, 0xdf, 0x97, 0xa4, 0x85, 0x4c,
	0xd0, 0x66, 0xa3, 0x11, 0x15, 0xce, 0x1f, 0x4a, 0x32, 0x24, 0x39, 0xf6, 0x00, 0x0f, 0x87, 0x24,
	0xea, 0x13, 0xe7, 0x8f, 0xa5, 0xa2, 0x25, 0x8f, 0xf0, 0xb1, 0x24, 0x9c, 0x3f, 0x95, 0xd0, 0x53,
	0xd8, 0xcf, 0x5b, 0x1a, 0x0e, 0x49, 0x20, 0xe8, 0x0d, 0xf1, 0x69, 0xdf, 0xf9, 0x73, 0x09, 0x1d,
	0xc0, 0xe3, 0x4c, 0xaa, 0x02, 0x65, 0x36, 0xfb, 0x4b, 0x49, 0x46, 0x6a, 0x5e, 0x96, 0xee, 0xf8,
	0xd7, 0x39, 0xc3, 0x4a, 0x9c, 0x6e, 0xfb, 0x71, 0x09, 0x7d, 0x09, 0x9e, 0x2e, 0x18, 0xce, 0xef,
	0xfd, 0xb7, 0x92, 0xfb, 0x14, 0xca, 0x32, 0x49, 0x5f, 0x74, 0x10, 0x02, 0x3b, 0xc2, 0x23, 0x5d,
	0x96, 0x55, 0x4f, 0xfd, 0x77, 0xdb, 0x50, 0x4d, 0xeb, 0x0c, 0x3d, 0x81, 0xb2, 0x4f, 0x02, 0x16,
	0x85, 0x4a, 0xc5, 0xf6, 0x0c, 0x85, 0xde, 0x05, 0xb8, 0xc0, 0x11, 0xe3, 0x5a, 0x56, 0x52, 0xb2,
	0x1c, 0xc7, 0xfd, 0xad, 0xa5, 0x4b, 0x23, 0xa9, 0x24, 0xf4, 0x2e, 0x94, 0xa8, 0x36, 0x52, 0x6b,
	0x6d, 0xe7, 0x6b, 0xed, 0x45, 0xc7, 0x2b, 0xd1, 0x50, 0x56, 0x31, 0x0e, 0xc3, 0x98, 0x70, 0xae,
	0xac, 0x55, 0xbd, 0x84, 0x94, 0x3e, 0x8e, 0x59, 0x2c, 0x54, 0x71, 0x37, 0x3c, 0xf5, 0x5f, 0xba,
	0x35, 0x9e, 0xf4, 0x5e, 0x93, 0x99, 0x29, 0x6b, 0x43, 0x49, 0x7e, 0xcc, 0x86, 0x84, 0x86, 0xaa,
	0xaa, 0xab, 0x9e, 0xa1, 0xd0, 0x01, 0x6c, 0x05, 0x8c, 0x46, 0x3d, 0xcc, 0x49, 0xb3, 0xac, 0x56,
	0xa4, 0xb4, 0xfb, 0x2b, 0x0b, 0xb6, 0x92, 0xec, 0x97, 0x8a, 0xaa, 0xc4, 0x2e, 0x26, 0x23, 0x73,
	0xe2, 0x94, 0x96, 0x67, 0x0e, 0xe9, 0xf5, 0x35, 0x0d, 0x26, 0x43, 0x31, 0x4b, 0xce, 0x9c, 0x71,
	0xd0, 0x1e, 0x6c, 0xc6, 0x38, 0x0a, 0xbf, 0xa9, 0x3c, 0xad, 0x7a, 0x9a, 0x48, 0xb8, 0x2d, 0xe5,
	0xa9, 0xe1, 0xb6, 0x1e, 0x00, 0x3e, 0xbf, 0x29, 0x41, 0xa3, 0x80, 0x14, 0x77, 0xfa, 0xb8, 0x07,
	0x9b, 0x11, 0x8b, 0x02, 0x62, 0xdc, 0xd3, 0xc4, 0x9c, 0xe7, 0x1b, 0xab, 0x3d, 0xb7, 0x97, 0x7a,
	0xbe, 0xb9, 0xcc, 0xf3, 0xf2, 0x7d, 0x9e, 0x4b, 0xf8, 0x1d, 0x4f, 0x7a, 0x43, 0x1a, 0xfc, 0x90,
	0xcc, 0x9a, 0x15, 0x0d, 0xbf, 0x29, 0xa3, 0x70, 0x25, 0x5b, 0xc5, 0x2b, 0x41, 0xef, 0x43, 0x39,
	0x26, 0x7c, 0x32, 0x14, 0xcd, 0x6a, 0x71, 0x97, 0x73, 0x1a, 0xd1, 0xa8, 0xef, 0x29, 0x99, 0x67,
	0x74, 0xdc, 0x5f, 0x58, 0x50, 0xcf, 0x0b, 0xa4, 0xe3, 0x17, 0x2a, 0x08, 0x3a, 0x3a, 0x9a, 0x90,
	0x19, 0x76, 0x4e, 0x6f, 0x9f, 0x63, 0x3e, 0x50, 0xc1, 0xa9, 0x7b, 0x09, 0x29, 0x1d, 0xed, 0xb2,
	0xa9, 0x5e, 0x6c, 0x7a, 0x48, 0xc6, 0x90, 0xd6, 0xba, 0x31, 0x63, 0xd7, 0x26, 0xd5, 0x34, 0x21,
	0xdd, 0x7f, 0x19, 0x5f, 0xdf, 0xe0, 0xe1, 0x84, 0xa8, 0xf8, 0xd4, 0xbd, 0x94, 0x76, 0x3f, 0xca,
	0x61, 0x48, 0xd7, 0xf4, 0xa2, 0xaf, 0x16, 0x1a, 0xe0, 0xe3, 0xe4, 0x40, 0xa9, 0x5e, 0xae, 0x03,
	0x3a, 0xb0, 0x31, 0xe2, 0x7d, 0xe3, 0xa4, 0xfc, 0xeb, 0x7e, 0x1f, 0xb6, 0x12, 0x8c, 0x5a, 0xcf,
	0xd0, 0x87, 0x50, 0xd6, 0x30, 0xb3, 0x9e, 0x99, 0xe7, 0x50, 0x4d, 0x11, 0x69, 0xed, 0x93, 0x25,
	0xe0, 0xb5, 0x9e, 0xa1, 0x33, 0x68, 0x14, 0x70, 0x6e, 0x3d, 0x6b, 0x3f, 0x80, 0x5a, 0x0e, 0x93,
	0xd7, 0xb3, 0x75, 0x0e, 0xdb, 0x45, 0x0c, 0x5f, 0xfb, 0xa0, 0x05, 0xcc, 0x5f, 0xcf, 0xda, 0x8f,
	0x00, 0x2d, 0xf6, 0x88, 0xf5, 0x4c, 0x7e, 0x5c, 0x82, 0xc6, 0xcb, 0xb6, 0x6a, 0xfb, 0xcf, 0x09,
	0x0e, 0x49, 0x5c, 0x1c, 0xe9, 0xac, 0x37, 0x18, 0xe9, 0xbe, 0x02, 0xdb, 0x37, 0xe9, 0x94, 0xd0,
	0xf1, 0x2f, 0x98, 0x81, 0xb3, 0x39, 0x6e, 0x51, 0xef, 0xf2, 0x27, 0x17, 0xcc, 0x60, 0xdb, 0x1c,
	0x17, 0xb5, 0xa0, 0x1a, 0x91, 0xe9, 0x99, 0xf2, 0x46, 0x95, 0xf1, 0x2a, 0xe0, 0xca, 0xd4, 0x64,
	0xd9, 0x73, 0x81, 0xfb, 0x24, 0x41, 0x3f, 0x45, 0x48, 0x10, 0xe9, 0x31, 0x36, 0x3c, 0xc7, 0xe3,
	0x66, 0xf9, 0x70, 0xe3, 0x68, 0xcb, 0x4b, 0xc8, 0xe2, 0xb0, 0x59, 0x99, 0x1f, 0x36, 0x0f, 0xa1,
	0x36, 0x9a, 0x0c, 0x05, 0xed, 0x4e, 0x7a, 0x12, 0x0d, 0x35, 0xe0, 0xe5, 0x59, 0xee, 0x07, 0x50,
	0x31, 0x51, 0x43, 0x5f, 0x83, 0xf2, 0x40, 0xfb, 0xaa, 0x83, 0x95, 0x5e, 0x40, 0x21, 0xac, 0x9e,
	0x51, 0x72, 0xff, 0x6b, 0x01, 0xa8, 0xe1, 0xf0, 0x9e, 0xd5, 0x97, 0xb7, 0x4b, 0x56, 0xcb, 0x13,
	0xf1, 0x01, 0x8e, 0xc3, 0x17, 0x1d, 0x15, 0xe4, 0x86, 0x97, 0x90, 0xe8, 0x19, 0x6c, 0x8e, 0x68,
	0x44, 0x62, 0x15, 0xd4, 0x55, 0x11, 0xd3, 0x2a, 0xa8, 0x05, 0x7b, 0x6a, 0x19, 0x8d, 0xfa, 0x32,
	0x7e, 0x6d, 0x46, 0xa3, 0x53, 0x89, 0xec, 0x1a, 0x33, 0x97, 0xca, 0xd0, 0x77, 0xa0, 0x9e, 0x9f,
	0xdf, 0x9a, 0x9b, 0x87, 0x1b, 0x47, 0xb5, 0xd6, 0x6e, 0xea, 0x6e, 0x26, 0xf3, 0x0a, 0x8a, 0xee,
	0x4b, 0xa8, 0xf9, 0x02, 0xbf, 0x26, 0xaf, 0x08, 0xed, 0x0f, 0xc4, 0xc3, 0xd3, 0xeb, 0x09, 0x94,
	0xa7, 0x6a, 0xa9, 0x49, 0x2b, 0x43, 0xb9, 0x3f, 0xb7, 0xa0, 0x72, 0x12, 0x04, 0x6c, 0x12, 0xdd,
	0xd1, 0x43, 0x4e, 0xf1, 0x10, 0x67, 0x0d, 0x36, 0x21, 0xe5, 0x94, 0xe2, 0x31, 0x96, 0xb4, 0x0f,
	0xf5, 0x5f, 0xb7, 0xb8, 0x90, 0xa8, 0x96, 0x63, 0x27, 0x2d, 0x4e, 0xd3, 0x32, 0x21, 0x78, 0x76,
	0x06, 0x95, 0x64, 0xb6, 0x97, 0x67, 0xb9, 0x9f, 0x94, 0xa0, 0x96, 0x3b, 0xb6, 0xdc, 0xfb, 0x86,
	0xc4, 0x72, 0x02, 0x50, 0x3e, 0x35, 0xbc, 0x84, 0x5c, 0xd1, 0xf4, 0x5d, 0xa8, 0x73, 0x12, 0x85,
	0x24, 0x36, 0x39, 0xa7, 0x3d, 0x2b, 0xf0, 0x64, 0x24, 0x04, 0x3b, 0x09, 0xc3, 0x38, 0x99, 0xa3,
	0x34, 0x25, 0xf9, 0x78, 0x24, 0xe3, 0x60, 0x1c, 0x33, 0x54, 0x31, 0xc9, 0xcb, 0xf3, 0x49, 0x7e,
	0x00, 0x5b, 0x7d, 0xcc, 0xbb, 0x31, 0x0d, 0x74, 0x05, 0xd8, 0x5e, 0x4a, 0x1b, 0xd9, 0x19, 0x1d,
	0x51, 0xa1, 0xb2, 0x5f, 0xcb, 0x14, 0x2d, 0x63, 0x27, 0xe3, 0xa2, 0x9a, 0x7d, 0xdd, 0x53, 0xff,
	0x25, 0x2f, 0xc4, 0x02, 0x37, 0x41, 0xf3, 0xe4, 0xff, 0xe2, 0x45, 0xd7, 0xee, 0xbf, 0x68, 0x17,
	0x43, 0xc5, 0x3c, 0x5e, 0x56, 0x57, 0x85, 0x51, 0x98, 0xab, 0x8a, 0xf7, 0xc0, 0xee, 0xb1, 0x70,
	0x66, 0x1e, 0xa0, 0xbb, 0x73, 0xca, 0xa7, 0x2c, 0x9c, 0x79, 0x4a, 0xc1, 0xfd, 0xb5, 0x2d, 0x9f,
	0x77, 0x79, 0xb4, 0x5b, 0x7d, 0x4f, 0x0f, 0x7e, 0xda, 0xbe, 0x0f, 0x3b, 0xe3, 0x98, 0xdc, 0x50,
	0x36, 0xe1, 0x7a, 0x07, 0x99, 0x49, 0xfa, 0x1e, 0x17, 0x05, 0x2a, 0xa5, 0x4c, 0x9d, 0xf9, 0x93,
	0x91, 0xba, 0xd1, 0x86, 0x97, 0x67, 0xc9, 0x94, 0x98, 0xd2, 0x28, 0x4a, 0x53, 0x42, 0x0f, 0x2e,
	0x05, 0x9e, 0xb4, 0xa2, 0x69, 0x9d, 0xfe, 0x65, 0x9d, 0x98, 0x39, 0x96, 0xd4, 0x48, 0xe6, 0xcd,
	0x1e, 0x89, 0xcd, 0x4d, 0xe7, 0x59, 0xe8, 0xcb, 0xd0, 0x18, 0xb3, 0x69, 0x27, 0x1b, 0x39, 0xf5,
	0x8d, 0x17, 0x99, 0xe8, 0x19, 0x38, 0x63, 0x36, 0xcd, 0x06, 0x5b, 0x39, 0xcf, 0x56, 0x95, 0xe2,
	0x02, 0xbf, 0x88, 0xe0, 0xf0, 0x66, 0x08, 0x9e, 0xe2, 0x57, 0xed, 0x7e, 0xfc, 0xca, 0xe1, 0x7a,
	0xfd, 0x0e, 0x5c, 0x6f, 0xdc, 0x83, 0xeb, 0xdb, 0x8b, 0xb8, 0xfe, 0x3b, 0x0b, 0x6a, 0xb9, 0xb4,
	0x41, 0xdf, 0x85, 0x46, 0x72, 0x25, 0xf2, 0x4d, 0xca, 0x9b, 0x96, 0x82, 0xbd, 0xe5, 0xde, 0x15,
	0x55, 0x65, 0x14, 0x02, 0x35, 0x91, 0x08, 0x22, 0x8b, 0x7d, 0xf5, 0xba, 0x4c, 0x4d, 0x46, 0x39,
	0x98, 0xc4, 0x31, 0x89, 0xc4, 0x7c, 0x0a, 0x2d, 0xf0, 0x65, 0xbd, 0x98, 0x26, 0xf1, 0xd0, 0x2e,
	0xb2, 0xa2, 0x5e, 0x8c, 0x72, 0xae, 0x5e, 0x3e, 0xb5, 0xa1, 0x51, 0x30, 0xf1, 0x7f, 0xad, 0x97,
	0x7c, 0x1e, 0xdb, 0x8b, 0x79, 0x2c, 0xdf, 0x4d, 0x7e, 0xda, 0xcb, 0x64, 0x7f, 0xaa, 0x7b, 0x39,
	0xce, 0xca, 0xae, 0x57, 0x56, 0x9a, 0xcb, 0xbb, 0x9e, 0xcc, 0x27, 0x81, 0x05, 0x51, 0xdd, 0x22,
	0x99, 0x13, 0x12, 0x86, 0x02, 0xe4, 0x5b, 0x25, 0xda, 0x32, 0x80, 0x7c, 0x9b, 0xb4, 0x92, 0x14,
	0x3e, 0xab, 0x73, 0xf0, 0xd9, 0x84, 0x4a, 0x1f, 0xf3, 0x1f, 0x73, 0x12, 0xaa, 0xca, 0xb0, 0xbd,
	0x84, 0xd4, 0xfe, 0x9f, 0x26, 0x6f, 0xc5, 0x9a, 0x79, 0xf7, 0xa5, 0x1c, 0x19, 0x01, 0x43, 0xa9,
	0x48, 0xd5, 0x75, 0xf6, 0xe6, 0x58, 0x59, 0x0d, 0x35, 0xee, 0xaf, 0xa1, 0x3d, 0xd8, 0x14, 0xb7,
	0x72, 0xa3, 0x6d, 0xdd, 0x86, 0x14, 0x91, 0xaf, 0xac, 0xb7, 0xee, 0xa8, 0x2c, 0xe7, 0x9e, 0xca,
	0xda, 0x59, 0xac, 0xac, 0xcf, 0x2d, 0xa8, 0xe5, 0x12, 0x0c, 0x1d, 0x03, 0x8a, 0xd4, 0xbd, 0x7d,
	0x74, 0x9d, 0x8d, 0x43, 0x26, 0xa7, 0x96, 0x48, 0x64, 0x65, 0x8c, 0x52, 0x4a, 0x9e, 0x96, 0x70,
	0x55, 0x54, 0x75, 0x6f, 0x81, 0xbf, 0x30, 0xab, 0x6c, 0xbc, 0xe1, 0xac, 0xb2, 0xb4, 0xfc, 0xec,
	0x15, 0xe5, 0xf7, 0x1e, 0xec, 0xb4, 0x59, 0x74, 0x4d, 0xfb, 0xde, 0x38, 0x48, 0xc7, 0xfb, 0xa4,
	0x39, 0xea, 0x73, 0xa8, 0xff, 0xee, 0xcf, 0x60, 0xeb, 0x45, 0x74, 0xcd, 0xe2, 0x51, 0x87, 0xcb,
	0xb7, 0xf2, 0x59, 0xbe, 0x50, 0x97, 0x5f, 0x91, 0xd1, 0x91, 0xf9, 0xd5, 0xe1, 0x3e, 0xfd, 0xa9,
	0x9e, 0x15, 0x36, 0x3d, 0x43, 0x49, 0x2b, 0x1d, 0x7e, 0x46, 0xb9, 0x30, 0x27, 0x5b, 0x61, 0x45,
	0xeb, 0xb8, 0x9f, 0x58, 0xb0, 0xad, 0x1d, 0xf0, 0x4d, 0x8a, 0x23, 0x17, 0x36, 0xba, 0x6c, 0x6a,
	0x7c, 0x70, 0x92, 0xd5, 0xc9, 0x77, 0x15, 0x4f, 0x0a, 0x65, 0xfb, 0x49, 0xf4, 0x73, 0x2e, 0x14,
	0x78, 0x0f, 0x73, 0x04, 0x7d, 0x90, 0x59, 0x54, 0x6b, 0xec, 0x3b, 0xd6, 0x14, 0x34, 0x9f, 0x8d,
	0xe5, 0x7b, 0x31, 0xf7, 0x9c, 0x51, 0xdf, 0x64, 0xf9, 0xdc, 0x27, 0xcd, 0x47, 0x68, 0x1f, 0x76,
	0xb3, 0x8c, 0xc9, 0x04, 0x96, 0x14, 0x2c, 0xfb, 0xe6, 0x5a, 0x92, 0x82, 0x65, 0x5f, 0x38, 0x37,
	0x5a, 0xdf, 0x06, 0x5b, 0xfa, 0x83, 0x8e, 0xc1, 0x6e, 0x0f, 0xb0, 0x40, 0x6f, 0xcd, 0x7d, 0x04,
	0x3f, 0x98, 0x67, 0xb8, 0x8f, 0x8e, 0xac, 0x6f, 0x58, 0x3d, 0xfd, 0x39, 0xfd, 0x5b, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xdb, 0xd9, 0xf5, 0xcf, 0x66, 0x17, 0x00, 0x00,
}

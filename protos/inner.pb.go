// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inner.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerStatusResponse struct {
	CrrRoleName          string `protobuf:"bytes,1,opt,name=crrRoleName" json:"crrRoleName,omitempty"`
	CrrFSMStatus         string `protobuf:"bytes,2,opt,name=crrFSMStatus" json:"crrFSMStatus,omitempty"`
	CssRole              uint32 `protobuf:"varint,3,opt,name=cssRole" json:"cssRole,omitempty"`
	CssMode              uint32 `protobuf:"varint,4,opt,name=cssMode" json:"cssMode,omitempty"`
	CrrGspPeersCnt       uint32 `protobuf:"varint,5,opt,name=crrGspPeersCnt" json:"crrGspPeersCnt,omitempty"`
	CrrPowCntInDSHandler uint32 `protobuf:"varint,6,opt,name=crrPowCntInDSHandler" json:"crrPowCntInDSHandler,omitempty"`
	CrrMBCntInDSHandler  uint32 `protobuf:"varint,7,opt,name=crrMBCntInDSHandler" json:"crrMBCntInDSHandler,omitempty"`
	CrrDSHeight          uint32 `protobuf:"varint,8,opt,name=crrDSHeight" json:"crrDSHeight,omitempty"`
	CrrTxHeight          uint32 `protobuf:"varint,9,opt,name=crrTxHeight" json:"crrTxHeight,omitempty"`
	TotalTXNum           uint32 `protobuf:"varint,10,opt,name=totalTXNum" json:"totalTXNum,omitempty"`
	ShardId              uint32 `protobuf:"varint,11,opt,name=shardId" json:"shardId,omitempty"`
	TxPending            uint32 `protobuf:"varint,12,opt,name=txPending" json:"txPending,omitempty"`
	TxQueued             uint32 `protobuf:"varint,13,opt,name=txQueued" json:"txQueued,omitempty"`
}

func (m *PeerStatusResponse) Reset()                    { *m = PeerStatusResponse{} }
func (m *PeerStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*PeerStatusResponse) ProtoMessage()               {}
func (*PeerStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PeerStatusResponse) GetCrrRoleName() string {
	if m != nil {
		return m.CrrRoleName
	}
	return ""
}

func (m *PeerStatusResponse) GetCrrFSMStatus() string {
	if m != nil {
		return m.CrrFSMStatus
	}
	return ""
}

func (m *PeerStatusResponse) GetCssRole() uint32 {
	if m != nil {
		return m.CssRole
	}
	return 0
}

func (m *PeerStatusResponse) GetCssMode() uint32 {
	if m != nil {
		return m.CssMode
	}
	return 0
}

func (m *PeerStatusResponse) GetCrrGspPeersCnt() uint32 {
	if m != nil {
		return m.CrrGspPeersCnt
	}
	return 0
}

func (m *PeerStatusResponse) GetCrrPowCntInDSHandler() uint32 {
	if m != nil {
		return m.CrrPowCntInDSHandler
	}
	return 0
}

func (m *PeerStatusResponse) GetCrrMBCntInDSHandler() uint32 {
	if m != nil {
		return m.CrrMBCntInDSHandler
	}
	return 0
}

func (m *PeerStatusResponse) GetCrrDSHeight() uint32 {
	if m != nil {
		return m.CrrDSHeight
	}
	return 0
}

func (m *PeerStatusResponse) GetCrrTxHeight() uint32 {
	if m != nil {
		return m.CrrTxHeight
	}
	return 0
}

func (m *PeerStatusResponse) GetTotalTXNum() uint32 {
	if m != nil {
		return m.TotalTXNum
	}
	return 0
}

func (m *PeerStatusResponse) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *PeerStatusResponse) GetTxPending() uint32 {
	if m != nil {
		return m.TxPending
	}
	return 0
}

func (m *PeerStatusResponse) GetTxQueued() uint32 {
	if m != nil {
		return m.TxQueued
	}
	return 0
}

func init() {
	proto.RegisterType((*PeerStatusResponse)(nil), "protos.PeerStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Inner service

type InnerClient interface {
	GetPeerStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PeerStatusResponse, error)
}

type innerClient struct {
	cc *grpc.ClientConn
}

func NewInnerClient(cc *grpc.ClientConn) InnerClient {
	return &innerClient{cc}
}

func (c *innerClient) GetPeerStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PeerStatusResponse, error) {
	out := new(PeerStatusResponse)
	err := grpc.Invoke(ctx, "/protos.Inner/GetPeerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Inner service

type InnerServer interface {
	GetPeerStatus(context.Context, *EmptyRequest) (*PeerStatusResponse, error)
}

func RegisterInnerServer(s *grpc.Server, srv InnerServer) {
	s.RegisterService(&_Inner_serviceDesc, srv)
}

func _Inner_GetPeerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerServer).GetPeerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Inner/GetPeerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerServer).GetPeerStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Inner",
	HandlerType: (*InnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeerStatus",
			Handler:    _Inner_GetPeerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner.proto",
}

func init() { proto.RegisterFile("inner.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x86, 0x3f, 0x3e, 0xe4, 0xef, 0xf0, 0xb3, 0x18, 0x59, 0x4c, 0x1a, 0x63, 0x08, 0x0b, 0xc3,
	0x8a, 0x18, 0xbc, 0x03, 0x41, 0x81, 0x44, 0x08, 0xb6, 0x2c, 0xdc, 0xd6, 0xce, 0x09, 0x90, 0x94,
	0x99, 0x7a, 0x66, 0x1a, 0xeb, 0x7d, 0x7a, 0x41, 0xa6, 0xd3, 0x16, 0x10, 0x59, 0x35, 0xe7, 0x79,
	0x9f, 0x37, 0x69, 0xce, 0x19, 0x68, 0xee, 0xa4, 0x44, 0x1a, 0x46, 0xa4, 0x8c, 0x62, 0x55, 0xfb,
	0xd1, 0x4e, 0x07, 0x93, 0x28, 0x54, 0x54, 0xf0, 0xfe, 0x77, 0x19, 0xd8, 0x0a, 0x91, 0x3c, 0xe3,
	0x9b, 0x58, 0xbb, 0xa8, 0x23, 0x25, 0x35, 0xb2, 0x1e, 0x34, 0x03, 0x22, 0x57, 0x85, 0xb8, 0xf4,
	0xf7, 0xc8, 0x4b, 0xbd, 0xd2, 0xa0, 0xe1, 0x9e, 0x22, 0xd6, 0x87, 0x56, 0x40, 0xf4, 0xec, 0x2d,
	0xb2, 0x26, 0xff, 0x6f, 0x95, 0x5f, 0x8c, 0x71, 0xa8, 0x05, 0x5a, 0xa7, 0x15, 0x5e, 0xee, 0x95,
	0x06, 0x6d, 0xb7, 0x18, 0xf3, 0x64, 0xa1, 0x04, 0xf2, 0xab, 0x43, 0x92, 0x8e, 0xec, 0x0e, 0x3a,
	0x01, 0xd1, 0x54, 0x47, 0xe9, 0x5f, 0xe9, 0xb1, 0x34, 0xbc, 0x62, 0x85, 0x33, 0xca, 0x46, 0xd0,
	0x0d, 0x88, 0x56, 0xea, 0x73, 0x2c, 0xcd, 0x5c, 0x4e, 0xbc, 0x99, 0x2f, 0x45, 0x88, 0xc4, 0xab,
	0xd6, 0xbe, 0x98, 0xb1, 0x7b, 0xb8, 0x0e, 0x88, 0x16, 0x8f, 0x67, 0x95, 0x9a, 0xad, 0x5c, 0x8a,
	0xf2, 0x3d, 0x4c, 0xbc, 0x19, 0xee, 0x36, 0x5b, 0xc3, 0xeb, 0xd6, 0x3c, 0x45, 0xb9, 0xb1, 0x4e,
	0x72, 0xa3, 0x71, 0x30, 0x0a, 0xc4, 0x6e, 0x01, 0x8c, 0x32, 0x7e, 0xb8, 0x7e, 0x5b, 0xc6, 0x7b,
	0x0e, 0x56, 0x38, 0x21, 0xe9, 0x2e, 0xf4, 0xd6, 0x27, 0x31, 0x17, 0xbc, 0x99, 0xed, 0x22, 0x1f,
	0xd9, 0x0d, 0x34, 0x4c, 0xb2, 0x42, 0x29, 0x76, 0x72, 0xc3, 0x5b, 0x36, 0x3b, 0x02, 0xe6, 0x40,
	0xdd, 0x24, 0xaf, 0x31, 0xc6, 0x28, 0x78, 0xdb, 0x86, 0x87, 0x79, 0xf4, 0x02, 0x95, 0x79, 0x7a,
	0x7d, 0x36, 0x86, 0xf6, 0x14, 0xcd, 0xf1, 0xc2, 0xac, 0x9b, 0x1d, 0x5e, 0x0f, 0x9f, 0xf6, 0x91,
	0xf9, 0x72, 0xf1, 0x23, 0x46, 0x6d, 0x1c, 0xa7, 0xa0, 0x7f, 0xdf, 0x42, 0xff, 0xdf, 0x7b, 0xf6,
	0x78, 0x1e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x90, 0xd3, 0x13, 0x52, 0x02, 0x00, 0x00,
}
